

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 19 05:20:22 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001D                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  0088                     	;# 
    64  0089                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009E                     	;# 
    75  009F                     	;# 
    76  010C                     	;# 
    77  010D                     	;# 
    78  010E                     	;# 
    79  010F                     	;# 
    80  018C                     	;# 
    81  018D                     	;# 
    82  000B                     _INTCONbits	set	11
    83  000C                     _PIR1bits	set	12
    84  000D                     _PIR2bits	set	13
    85  0005                     _PORTAbits	set	5
    86  0006                     _PORTB	set	6
    87  0006                     _PORTBbits	set	6
    88  0007                     _PORTCbits	set	7
    89  0008                     _PORTDbits	set	8
    90  0009                     _PORTEbits	set	9
    91  0013                     _SSPBUF	set	19
    92  0014                     _SSPCONbits	set	20
    93  0010                     _T1CONbits	set	16
    94  000F                     _TMR1H	set	15
    95  000E                     _TMR1L	set	14
    96  009F                     _ADCON1bits	set	159
    97  0081                     _OPTION_REGbits	set	129
    98  008C                     _PIE1bits	set	140
    99  008D                     _PIE2bits	set	141
   100  0094                     _SSPSTATbits	set	148
   101  0085                     _TRISAbits	set	133
   102  0086                     _TRISBbits	set	134
   103  0087                     _TRISCbits	set	135
   104  0088                     _TRISDbits	set	136
   105  0089                     _TRISEbits	set	137
   106                           
   107                           	psect	text0
   108  0000                     __ptext0:	
   109                           ; #config settings
   110                           
   111                           
   112                           ;psect for function _spiBufferfull
   113  0000                     
   114                           	psect	cinit
   115  07FA                     start_initialization:	
   116  07FA                     __initialization:	
   117                           
   118                           ; Clear objects allocated to COMMON
   119  07FA  01F8               	clrf	__pbssCOMMON& (0+127)
   120  07FB  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   121  07FC                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  07FC                     __end_of__initialization:	
   125  07FC  0183               	clrf	3
   126  07FD  120A  118A  29D9   	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0078                     __pbssCOMMON:	
   130  0078                     _data:	
   131  0078                     	ds	2
   132                           
   133                           	psect	cstackCOMMON
   134  0070                     __pcstackCOMMON:	
   135  0070                     ?_setup:	
   136  0070                     ?_loop:	
   137                           ; 0 bytes @ 0x0
   138                           
   139  0070                     ?_ADPortConfiguration:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ?_portbMode:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ?_portdMode:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_digitalWrite:	
   149                           ; 0 bytes @ 0x0
   150                           
   151  0070                     ?_spiSlavebegin:	
   152                           ; 0 bytes @ 0x0
   153                           
   154  0070                     ?_spiCLKpolarity:	
   155                           ; 0 bytes @ 0x0
   156                           
   157  0070                     ??_spiCLKpolarity:	
   158                           ; 0 bytes @ 0x0
   159                           
   160  0070                     ?_GlobalInterruptEnable:	
   161                           ; 0 bytes @ 0x0
   162                           
   163  0070                     ?_PeripheralIntEnable:	
   164                           ; 0 bytes @ 0x0
   165                           
   166  0070                     ?_PortBChangeIntEnable:	
   167                           ; 0 bytes @ 0x0
   168                           
   169  0070                     ?_SSPInterruptEnable:	
   170                           ; 0 bytes @ 0x0
   171                           
   172  0070                     ??_SSPInterruptEnable:	
   173                           ; 0 bytes @ 0x0
   174                           
   175  0070                     ?_main:	
   176                           ; 0 bytes @ 0x0
   177                           
   178  0070                     ?_spiRead:	
   179                           ; 2 bytes @ 0x0
   180                           
   181  0070                     ?_spiBufferfull:	
   182                           ; 2 bytes @ 0x0
   183                           
   184  0070                     spiCLKpolarity@polarity:	
   185                           ; 2 bytes @ 0x0
   186                           
   187  0070                     portbMode@pin:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0070                     portdMode@pin:	
   191                           ; 2 bytes @ 0x0
   192                           
   193  0070                     digitalWrite@pin:	
   194                           ; 2 bytes @ 0x0
   195                           
   196  0070                     ADPortConfiguration@config:	
   197                           ; 2 bytes @ 0x0
   198                           
   199  0070                     GlobalInterruptEnable@mode:	
   200                           ; 2 bytes @ 0x0
   201                           
   202  0070                     PeripheralIntEnable@mode:	
   203                           ; 2 bytes @ 0x0
   204                           
   205  0070                     PortBChangeIntEnable@mode:	
   206                           ; 2 bytes @ 0x0
   207                           
   208                           
   209                           ; 2 bytes @ 0x0
   210  0070                     	ds	2
   211  0072                     ??_ADPortConfiguration:	
   212  0072                     ??_spiRead:	
   213                           ; 0 bytes @ 0x2
   214                           
   215  0072                     ??_spiSlavebegin:	
   216                           ; 0 bytes @ 0x2
   217                           
   218  0072                     ??_spiBufferfull:	
   219                           ; 0 bytes @ 0x2
   220                           
   221  0072                     ??_GlobalInterruptEnable:	
   222                           ; 0 bytes @ 0x2
   223                           
   224  0072                     ??_PeripheralIntEnable:	
   225                           ; 0 bytes @ 0x2
   226                           
   227  0072                     ??_PortBChangeIntEnable:	
   228                           ; 0 bytes @ 0x2
   229                           
   230  0072                     portbMode@mode:	
   231                           ; 0 bytes @ 0x2
   232                           
   233  0072                     portdMode@mode:	
   234                           ; 1 bytes @ 0x2
   235                           
   236  0072                     digitalWrite@port:	
   237                           ; 1 bytes @ 0x2
   238                           
   239                           
   240                           ; 1 bytes @ 0x2
   241  0072                     	ds	1
   242  0073                     ??_portbMode:	
   243  0073                     ??_portdMode:	
   244                           ; 0 bytes @ 0x3
   245                           
   246  0073                     digitalWrite@value:	
   247                           ; 0 bytes @ 0x3
   248                           
   249                           
   250                           ; 1 bytes @ 0x3
   251  0073                     	ds	1
   252  0074                     ??_setup:	
   253  0074                     ??_loop:	
   254                           ; 0 bytes @ 0x4
   255                           
   256  0074                     ??_digitalWrite:	
   257                           ; 0 bytes @ 0x4
   258                           
   259                           
   260                           ; 0 bytes @ 0x4
   261  0074                     	ds	2
   262  0076                     setup@i:	
   263                           
   264                           ; 2 bytes @ 0x6
   265  0076                     	ds	2
   266  0078                     ??_main:	
   267                           
   268                           	psect	maintext
   269  01D9                     __pmaintext:	
   270                           ; 0 bytes @ 0x8
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 108 in file "Tonche_16F877.h"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  2   58[COMMON] int 
   283 ;; Registers used:
   284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 17F/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   290 ;;      Params:         0       0       0       0       0
   291 ;;      Locals:         0       0       0       0       0
   292 ;;      Temps:          0       0       0       0       0
   293 ;;      Totals:         0       0       0       0       0
   294 ;;Total ram usage:        0 bytes
   295 ;; Hardware stack levels required when called:    3
   296 ;; This function calls:
   297 ;;		_loop
   298 ;;		_setup
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           
   305                           ;psect for function _main
   306  01D9                     _main:	
   307                           
   308                           ;Tonche_16F877.h: 110: setup();
   309                           
   310                           ;incstack = 0
   311                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   312  01D9  120A  118A  2226  120A  118A  	fcall	_setup
   313  01DE                     l1995:	
   314                           ;Tonche_16F877.h: 111: while(1)
   315                           
   316                           
   317                           ;Tonche_16F877.h: 112: {
   318                           ;Tonche_16F877.h: 113: loop();
   319  01DE  120A  118A  21F5  120A  118A  	fcall	_loop
   320  01E3  29DE               	goto	l1995
   321  01E4                     __end_of_main:	
   322                           
   323                           	psect	text1
   324  0226                     __ptext1:	
   325 ;; *************** function _setup *****************
   326 ;; Defined at:
   327 ;;		line 7 in file "main.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;  i               2    6[COMMON] int 
   332 ;; Return value:  Size  Location     Type
   333 ;;		None               void
   334 ;; Registers used:
   335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : 0/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   341 ;;      Params:         0       0       0       0       0
   342 ;;      Locals:         2       0       0       0       0
   343 ;;      Temps:          2       0       0       0       0
   344 ;;      Totals:         4       0       0       0       0
   345 ;;Total ram usage:        4 bytes
   346 ;; Hardware stack levels used:    1
   347 ;; Hardware stack levels required when called:    2
   348 ;; This function calls:
   349 ;;		_GlobalInterruptEnable
   350 ;;		_PeripheralIntEnable
   351 ;;		_PortBChangeIntEnable
   352 ;;		_SSPInterruptEnable
   353 ;;		_digitalWrite
   354 ;;		_portbMode
   355 ;;		_portdMode
   356 ;;		_spiCLKpolarity
   357 ;;		_spiSlavebegin
   358 ;; This function is called by:
   359 ;;		_main
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           
   364                           ;psect for function _setup
   365  0226                     _setup:	
   366                           
   367                           ;main.c: 9: TRISDbits.TRISD2 = 0;
   368                           
   369                           ;incstack = 0
   370                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   371  0226  1683               	bsf	3,5	;RP0=1, select bank1
   372  0227  1303               	bcf	3,6	;RP1=0, select bank1
   373  0228  1108               	bcf	8,2	;volatile
   374                           
   375                           ;main.c: 10: TRISEbits.PSPMODE = 0;
   376  0229  1209               	bcf	9,4	;volatile
   377                           
   378                           ;main.c: 11: GlobalInterruptEnable(1);
   379  022A  3001               	movlw	1
   380  022B  00F0               	movwf	GlobalInterruptEnable@mode
   381  022C  3000               	movlw	0
   382  022D  00F1               	movwf	GlobalInterruptEnable@mode+1
   383  022E  120A  118A  21A9  120A  118A  	fcall	_GlobalInterruptEnable
   384                           
   385                           ;main.c: 12: PeripheralIntEnable(1);
   386  0233  3001               	movlw	1
   387  0234  00F0               	movwf	PeripheralIntEnable@mode
   388  0235  3000               	movlw	0
   389  0236  00F1               	movwf	PeripheralIntEnable@mode+1
   390  0237  120A  118A  21B2  120A  118A  	fcall	_PeripheralIntEnable
   391                           
   392                           ;main.c: 13: PortBChangeIntEnable(0);
   393  023C  3000               	movlw	0
   394  023D  00F0               	movwf	PortBChangeIntEnable@mode
   395  023E  3000               	movlw	0
   396  023F  00F1               	movwf	PortBChangeIntEnable@mode+1
   397  0240  120A  118A  21BB  120A  118A  	fcall	_PortBChangeIntEnable
   398                           
   399                           ;main.c: 14: SSPInterruptEnable();
   400  0245  120A  118A  21A5  120A  118A  	fcall	_SSPInterruptEnable
   401                           
   402                           ;main.c: 15: spiSlavebegin();
   403  024A  120A  118A  220C  120A  118A  	fcall	_spiSlavebegin
   404                           
   405                           ;main.c: 16: portdMode(2,'O');
   406  024F  3002               	movlw	2
   407  0250  00F0               	movwf	portdMode@pin
   408  0251  3000               	movlw	0
   409  0252  00F1               	movwf	portdMode@pin+1
   410  0253  304F               	movlw	79
   411  0254  00F4               	movwf	??_setup
   412  0255  0874               	movf	??_setup,w
   413  0256  00F2               	movwf	portdMode@mode
   414  0257  120A  118A  2444  120A  118A  	fcall	_portdMode
   415                           
   416                           ;main.c: 17: digitalWrite(2,'D','l');
   417  025C  3002               	movlw	2
   418  025D  00F0               	movwf	digitalWrite@pin
   419  025E  3000               	movlw	0
   420  025F  00F1               	movwf	digitalWrite@pin+1
   421  0260  3044               	movlw	68
   422  0261  00F4               	movwf	??_setup
   423  0262  0874               	movf	??_setup,w
   424  0263  00F2               	movwf	digitalWrite@port
   425  0264  306C               	movlw	108
   426  0265  00F5               	movwf	??_setup+1
   427  0266  0875               	movf	??_setup+1,w
   428  0267  00F3               	movwf	digitalWrite@value
   429  0268  120A  118A  254C  120A  118A  	fcall	_digitalWrite
   430                           
   431                           ;main.c: 18: spiCLKpolarity('l');
   432  026D  306C               	movlw	108
   433  026E  120A  118A  21E4  120A  118A  	fcall	_spiCLKpolarity
   434                           
   435                           ;main.c: 19: for( int i=0;i<=7;i++)
   436  0273  01F6               	clrf	setup@i
   437  0274  01F7               	clrf	setup@i+1
   438  0275                     L1:	
   439  0275  0877               	movf	setup@i+1,w
   440  0276  3A80               	xorlw	128
   441  0277  00FF               	movwf	127
   442  0278  3080               	movlw	128
   443  0279  027F               	subwf	127,w
   444  027A  1D03               	skipz
   445  027B  2A7E               	goto	u1465
   446  027C  3008               	movlw	8
   447  027D  0276               	subwf	setup@i,w
   448  027E                     u1465:	
   449  027E  1803               	btfsc	3,0
   450  027F  0008               	return
   451                           
   452                           ;main.c: 20: {
   453                           ;main.c: 21: portbMode(i,'O');
   454  0280  0877               	movf	setup@i+1,w
   455  0281  01F1               	clrf	portbMode@pin+1
   456  0282  07F1               	addwf	portbMode@pin+1,f
   457  0283  0876               	movf	setup@i,w
   458  0284  01F0               	clrf	portbMode@pin
   459  0285  07F0               	addwf	portbMode@pin,f
   460  0286  304F               	movlw	79
   461  0287  00F4               	movwf	??_setup
   462  0288  0874               	movf	??_setup,w
   463  0289  00F2               	movwf	portbMode@mode
   464  028A  120A  118A  233C  120A  118A  	fcall	_portbMode
   465  028F  3001               	movlw	1
   466  0290  07F6               	addwf	setup@i,f
   467  0291  1803               	skipnc
   468  0292  0AF7               	incf	setup@i+1,f
   469  0293  3000               	movlw	0
   470  0294  07F7               	addwf	setup@i+1,f
   471  0295  2A75               	goto	L1
   472  0296                     __end_of_setup:	
   473                           
   474                           	psect	text2
   475  020C                     __ptext2:	
   476 ;; *************** function _spiSlavebegin *****************
   477 ;; Defined at:
   478 ;;		line 1496 in file "Tonche_16F877.h"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;		None               void
   485 ;; Registers used:
   486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          0       0       0       0       0
   495 ;;      Totals:         0       0       0       0       0
   496 ;;Total ram usage:        0 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    1
   499 ;; This function calls:
   500 ;;		_ADPortConfiguration
   501 ;; This function is called by:
   502 ;;		_setup
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _spiSlavebegin
   508  020C                     _spiSlavebegin:	
   509                           
   510                           ;Tonche_16F877.h: 1498: ADPortConfiguration(14);
   511                           
   512                           ;incstack = 0
   513                           ; Regs used in _spiSlavebegin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   514  020C  300E               	movlw	14
   515  020D  00F0               	movwf	ADPortConfiguration@config
   516  020E  3000               	movlw	0
   517  020F  00F1               	movwf	ADPortConfiguration@config+1
   518  0210  120A  118A  2296   	fcall	_ADPortConfiguration
   519                           
   520                           ;Tonche_16F877.h: 1499: SSPSTATbits.SMP = 0;
   521  0213  1683               	bsf	3,5	;RP0=1, select bank1
   522  0214  1303               	bcf	3,6	;RP1=0, select bank1
   523  0215  1394               	bcf	20,7	;volatile
   524                           
   525                           ;Tonche_16F877.h: 1500: SSPCONbits.SSPEN = 1;
   526  0216  1283               	bcf	3,5	;RP0=0, select bank0
   527  0217  1303               	bcf	3,6	;RP1=0, select bank0
   528  0218  1694               	bsf	20,5	;volatile
   529                           
   530                           ;Tonche_16F877.h: 1501: TRISCbits.TRISC3 = 1;
   531  0219  1683               	bsf	3,5	;RP0=1, select bank1
   532  021A  1303               	bcf	3,6	;RP1=0, select bank1
   533  021B  1587               	bsf	7,3	;volatile
   534                           
   535                           ;Tonche_16F877.h: 1502: TRISCbits.TRISC4 = 1;
   536  021C  1607               	bsf	7,4	;volatile
   537                           
   538                           ;Tonche_16F877.h: 1503: TRISCbits.TRISC5 = 0;
   539  021D  1287               	bcf	7,5	;volatile
   540                           
   541                           ;Tonche_16F877.h: 1504: TRISAbits.TRISA5 = 1;
   542  021E  1685               	bsf	5,5	;volatile
   543                           
   544                           ;Tonche_16F877.h: 1505: SSPCONbits.SSPM3 = 0;
   545  021F  1283               	bcf	3,5	;RP0=0, select bank0
   546  0220  1303               	bcf	3,6	;RP1=0, select bank0
   547  0221  1194               	bcf	20,3	;volatile
   548                           
   549                           ;Tonche_16F877.h: 1506: SSPCONbits.SSPM2 = 1;
   550  0222  1514               	bsf	20,2	;volatile
   551                           
   552                           ;Tonche_16F877.h: 1507: SSPCONbits.SSPM1 = 0;
   553  0223  1094               	bcf	20,1	;volatile
   554                           
   555                           ;Tonche_16F877.h: 1508: SSPCONbits.SSPM0 = 0;
   556  0224  1014               	bcf	20,0	;volatile
   557  0225  0008               	return
   558  0226                     __end_of_spiSlavebegin:	
   559                           
   560                           	psect	text3
   561  0296                     __ptext3:	
   562 ;; *************** function _ADPortConfiguration *****************
   563 ;; Defined at:
   564 ;;		line 1511 in file "Tonche_16F877.h"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  config          2    0[COMMON] const int 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;		None               void
   571 ;; Registers used:
   572 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   578 ;;      Params:         2       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0
   580 ;;      Temps:          0       0       0       0       0
   581 ;;      Totals:         2       0       0       0       0
   582 ;;Total ram usage:        2 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; This function calls:
   585 ;;		Nothing
   586 ;; This function is called by:
   587 ;;		_spiSlavebegin
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           
   592                           ;psect for function _ADPortConfiguration
   593  0296                     _ADPortConfiguration:	
   594                           
   595                           ;Tonche_16F877.h: 1513: switch(config)
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _ADPortConfiguration: [wreg-fsr0h+status,2+status,0]
   599  0296  2B07               	goto	l1429
   600  0297                     l756:	
   601                           ;Tonche_16F877.h: 1514: {
   602                           ;Tonche_16F877.h: 1515: case 0:
   603                           
   604                           
   605                           ;Tonche_16F877.h: 1516: ADCON1bits.PCFG3 = 0;
   606  0297  1683               	bsf	3,5	;RP0=1, select bank1
   607  0298  1303               	bcf	3,6	;RP1=0, select bank1
   608  0299  119F               	bcf	31,3	;volatile
   609                           
   610                           ;Tonche_16F877.h: 1517: ADCON1bits.PCFG2 = 0;
   611  029A  111F               	bcf	31,2	;volatile
   612                           
   613                           ;Tonche_16F877.h: 1518: ADCON1bits.PCFG1 = 0;
   614  029B  109F               	bcf	31,1	;volatile
   615                           
   616                           ;Tonche_16F877.h: 1519: ADCON1bits.PCFG0 = 0;
   617  029C  101F               	bcf	31,0	;volatile
   618                           
   619                           ;Tonche_16F877.h: 1520: break;
   620  029D  0008               	return
   621  029E                     l758:	
   622                           ;Tonche_16F877.h: 1521: case 1:
   623                           
   624                           
   625                           ;Tonche_16F877.h: 1522: ADCON1bits.PCFG3 = 0;
   626  029E  1683               	bsf	3,5	;RP0=1, select bank1
   627  029F  1303               	bcf	3,6	;RP1=0, select bank1
   628  02A0  119F               	bcf	31,3	;volatile
   629                           
   630                           ;Tonche_16F877.h: 1523: ADCON1bits.PCFG2 = 0;
   631  02A1  111F               	bcf	31,2	;volatile
   632                           
   633                           ;Tonche_16F877.h: 1524: ADCON1bits.PCFG1 = 0;
   634  02A2  109F               	bcf	31,1	;volatile
   635                           
   636                           ;Tonche_16F877.h: 1525: ADCON1bits.PCFG0 = 1;
   637  02A3  141F               	bsf	31,0	;volatile
   638                           
   639                           ;Tonche_16F877.h: 1526: break;
   640  02A4  0008               	return
   641  02A5                     l759:	
   642                           ;Tonche_16F877.h: 1527: case 2:
   643                           
   644                           
   645                           ;Tonche_16F877.h: 1528: ADCON1bits.PCFG3 = 0;
   646  02A5  1683               	bsf	3,5	;RP0=1, select bank1
   647  02A6  1303               	bcf	3,6	;RP1=0, select bank1
   648  02A7  119F               	bcf	31,3	;volatile
   649                           
   650                           ;Tonche_16F877.h: 1529: ADCON1bits.PCFG2 = 0;
   651  02A8  111F               	bcf	31,2	;volatile
   652                           
   653                           ;Tonche_16F877.h: 1530: ADCON1bits.PCFG1 = 1;
   654  02A9  149F               	bsf	31,1	;volatile
   655                           
   656                           ;Tonche_16F877.h: 1531: ADCON1bits.PCFG0 = 0;
   657  02AA  101F               	bcf	31,0	;volatile
   658                           
   659                           ;Tonche_16F877.h: 1532: break;
   660  02AB  0008               	return
   661  02AC                     l760:	
   662                           ;Tonche_16F877.h: 1533: case 3:
   663                           
   664                           
   665                           ;Tonche_16F877.h: 1534: ADCON1bits.PCFG3 = 0;
   666  02AC  1683               	bsf	3,5	;RP0=1, select bank1
   667  02AD  1303               	bcf	3,6	;RP1=0, select bank1
   668  02AE  119F               	bcf	31,3	;volatile
   669                           
   670                           ;Tonche_16F877.h: 1535: ADCON1bits.PCFG2 = 0;
   671  02AF  111F               	bcf	31,2	;volatile
   672                           
   673                           ;Tonche_16F877.h: 1536: ADCON1bits.PCFG1 = 1;
   674  02B0  149F               	bsf	31,1	;volatile
   675                           
   676                           ;Tonche_16F877.h: 1537: ADCON1bits.PCFG0 = 1;
   677  02B1  141F               	bsf	31,0	;volatile
   678                           
   679                           ;Tonche_16F877.h: 1538: break;
   680  02B2  0008               	return
   681  02B3                     l761:	
   682                           ;Tonche_16F877.h: 1539: case 4:
   683                           
   684                           
   685                           ;Tonche_16F877.h: 1540: ADCON1bits.PCFG3 = 0;
   686  02B3  1683               	bsf	3,5	;RP0=1, select bank1
   687  02B4  1303               	bcf	3,6	;RP1=0, select bank1
   688  02B5  119F               	bcf	31,3	;volatile
   689                           
   690                           ;Tonche_16F877.h: 1541: ADCON1bits.PCFG2 = 1;
   691  02B6  151F               	bsf	31,2	;volatile
   692                           
   693                           ;Tonche_16F877.h: 1542: ADCON1bits.PCFG1 = 0;
   694  02B7  109F               	bcf	31,1	;volatile
   695                           
   696                           ;Tonche_16F877.h: 1543: ADCON1bits.PCFG0 = 0;
   697  02B8  101F               	bcf	31,0	;volatile
   698                           
   699                           ;Tonche_16F877.h: 1544: break;
   700  02B9  0008               	return
   701  02BA                     l762:	
   702                           ;Tonche_16F877.h: 1545: case 5:
   703                           
   704                           
   705                           ;Tonche_16F877.h: 1546: ADCON1bits.PCFG3 = 0;
   706  02BA  1683               	bsf	3,5	;RP0=1, select bank1
   707  02BB  1303               	bcf	3,6	;RP1=0, select bank1
   708  02BC  119F               	bcf	31,3	;volatile
   709                           
   710                           ;Tonche_16F877.h: 1547: ADCON1bits.PCFG2 = 1;
   711  02BD  151F               	bsf	31,2	;volatile
   712                           
   713                           ;Tonche_16F877.h: 1548: ADCON1bits.PCFG1 = 0;
   714  02BE  109F               	bcf	31,1	;volatile
   715                           
   716                           ;Tonche_16F877.h: 1549: ADCON1bits.PCFG0 = 1;
   717  02BF  141F               	bsf	31,0	;volatile
   718                           
   719                           ;Tonche_16F877.h: 1550: break;
   720  02C0  0008               	return
   721  02C1                     l763:	
   722                           ;Tonche_16F877.h: 1551: case 6:
   723                           
   724                           
   725                           ;Tonche_16F877.h: 1552: ADCON1bits.PCFG3 = 0;
   726  02C1  1683               	bsf	3,5	;RP0=1, select bank1
   727  02C2  1303               	bcf	3,6	;RP1=0, select bank1
   728  02C3  119F               	bcf	31,3	;volatile
   729                           
   730                           ;Tonche_16F877.h: 1553: ADCON1bits.PCFG2 = 1;
   731  02C4  151F               	bsf	31,2	;volatile
   732                           
   733                           ;Tonche_16F877.h: 1554: ADCON1bits.PCFG1 = 1;
   734  02C5  149F               	bsf	31,1	;volatile
   735                           
   736                           ;Tonche_16F877.h: 1555: ADCON1bits.PCFG0 = 0;
   737  02C6  101F               	bcf	31,0	;volatile
   738                           
   739                           ;Tonche_16F877.h: 1556: break;
   740  02C7  0008               	return
   741  02C8                     l764:	
   742                           ;Tonche_16F877.h: 1557: case 7:
   743                           
   744                           
   745                           ;Tonche_16F877.h: 1558: ADCON1bits.PCFG3 = 1;
   746  02C8  1683               	bsf	3,5	;RP0=1, select bank1
   747  02C9  1303               	bcf	3,6	;RP1=0, select bank1
   748  02CA  159F               	bsf	31,3	;volatile
   749                           
   750                           ;Tonche_16F877.h: 1559: ADCON1bits.PCFG2 = 0;
   751  02CB  111F               	bcf	31,2	;volatile
   752                           
   753                           ;Tonche_16F877.h: 1560: ADCON1bits.PCFG1 = 0;
   754  02CC  109F               	bcf	31,1	;volatile
   755                           
   756                           ;Tonche_16F877.h: 1561: ADCON1bits.PCFG0 = 0;
   757  02CD  101F               	bcf	31,0	;volatile
   758                           
   759                           ;Tonche_16F877.h: 1562: break;
   760  02CE  0008               	return
   761  02CF                     l765:	
   762                           ;Tonche_16F877.h: 1563: case 8:
   763                           
   764                           
   765                           ;Tonche_16F877.h: 1564: ADCON1bits.PCFG3 = 1;
   766  02CF  1683               	bsf	3,5	;RP0=1, select bank1
   767  02D0  1303               	bcf	3,6	;RP1=0, select bank1
   768  02D1  159F               	bsf	31,3	;volatile
   769                           
   770                           ;Tonche_16F877.h: 1565: ADCON1bits.PCFG2 = 0;
   771  02D2  111F               	bcf	31,2	;volatile
   772                           
   773                           ;Tonche_16F877.h: 1566: ADCON1bits.PCFG1 = 0;
   774  02D3  109F               	bcf	31,1	;volatile
   775                           
   776                           ;Tonche_16F877.h: 1567: ADCON1bits.PCFG0 = 1;
   777  02D4  141F               	bsf	31,0	;volatile
   778                           
   779                           ;Tonche_16F877.h: 1568: break;
   780  02D5  0008               	return
   781  02D6                     l766:	
   782                           ;Tonche_16F877.h: 1569: case 9:
   783                           
   784                           
   785                           ;Tonche_16F877.h: 1570: ADCON1bits.PCFG3 = 1;
   786  02D6  1683               	bsf	3,5	;RP0=1, select bank1
   787  02D7  1303               	bcf	3,6	;RP1=0, select bank1
   788  02D8  159F               	bsf	31,3	;volatile
   789                           
   790                           ;Tonche_16F877.h: 1571: ADCON1bits.PCFG2 = 0;
   791  02D9  111F               	bcf	31,2	;volatile
   792                           
   793                           ;Tonche_16F877.h: 1572: ADCON1bits.PCFG1 = 1;
   794  02DA  149F               	bsf	31,1	;volatile
   795                           
   796                           ;Tonche_16F877.h: 1573: ADCON1bits.PCFG0 = 0;
   797  02DB  101F               	bcf	31,0	;volatile
   798                           
   799                           ;Tonche_16F877.h: 1574: break;
   800  02DC  0008               	return
   801  02DD                     l767:	
   802                           ;Tonche_16F877.h: 1575: case 10:
   803                           
   804                           
   805                           ;Tonche_16F877.h: 1576: ADCON1bits.PCFG3 = 1;
   806  02DD  1683               	bsf	3,5	;RP0=1, select bank1
   807  02DE  1303               	bcf	3,6	;RP1=0, select bank1
   808  02DF  159F               	bsf	31,3	;volatile
   809                           
   810                           ;Tonche_16F877.h: 1577: ADCON1bits.PCFG2 = 0;
   811  02E0  111F               	bcf	31,2	;volatile
   812                           
   813                           ;Tonche_16F877.h: 1578: ADCON1bits.PCFG1 = 1;
   814  02E1  149F               	bsf	31,1	;volatile
   815                           
   816                           ;Tonche_16F877.h: 1579: ADCON1bits.PCFG0 = 1;
   817  02E2  141F               	bsf	31,0	;volatile
   818                           
   819                           ;Tonche_16F877.h: 1580: break;
   820  02E3  0008               	return
   821  02E4                     l768:	
   822                           ;Tonche_16F877.h: 1581: case 11:
   823                           
   824                           
   825                           ;Tonche_16F877.h: 1582: ADCON1bits.PCFG3 = 1;
   826  02E4  1683               	bsf	3,5	;RP0=1, select bank1
   827  02E5  1303               	bcf	3,6	;RP1=0, select bank1
   828  02E6  159F               	bsf	31,3	;volatile
   829                           
   830                           ;Tonche_16F877.h: 1583: ADCON1bits.PCFG2 = 1;
   831  02E7  151F               	bsf	31,2	;volatile
   832                           
   833                           ;Tonche_16F877.h: 1584: ADCON1bits.PCFG1 = 0;
   834  02E8  109F               	bcf	31,1	;volatile
   835                           
   836                           ;Tonche_16F877.h: 1585: ADCON1bits.PCFG0 = 0;
   837  02E9  101F               	bcf	31,0	;volatile
   838                           
   839                           ;Tonche_16F877.h: 1586: break;
   840  02EA  0008               	return
   841  02EB                     l769:	
   842                           ;Tonche_16F877.h: 1587: case 12:
   843                           
   844                           
   845                           ;Tonche_16F877.h: 1588: ADCON1bits.PCFG3 = 1;
   846  02EB  1683               	bsf	3,5	;RP0=1, select bank1
   847  02EC  1303               	bcf	3,6	;RP1=0, select bank1
   848  02ED  159F               	bsf	31,3	;volatile
   849                           
   850                           ;Tonche_16F877.h: 1589: ADCON1bits.PCFG2 = 1;
   851  02EE  151F               	bsf	31,2	;volatile
   852                           
   853                           ;Tonche_16F877.h: 1590: ADCON1bits.PCFG1 = 0;
   854  02EF  109F               	bcf	31,1	;volatile
   855                           
   856                           ;Tonche_16F877.h: 1591: ADCON1bits.PCFG0 = 1;
   857  02F0  141F               	bsf	31,0	;volatile
   858                           
   859                           ;Tonche_16F877.h: 1592: break;
   860  02F1  0008               	return
   861  02F2                     l770:	
   862                           ;Tonche_16F877.h: 1593: case 13:
   863                           
   864                           
   865                           ;Tonche_16F877.h: 1594: ADCON1bits.PCFG3 = 1;
   866  02F2  1683               	bsf	3,5	;RP0=1, select bank1
   867  02F3  1303               	bcf	3,6	;RP1=0, select bank1
   868  02F4  159F               	bsf	31,3	;volatile
   869                           
   870                           ;Tonche_16F877.h: 1595: ADCON1bits.PCFG2 = 1;
   871  02F5  151F               	bsf	31,2	;volatile
   872                           
   873                           ;Tonche_16F877.h: 1596: ADCON1bits.PCFG1 = 1;
   874  02F6  149F               	bsf	31,1	;volatile
   875                           
   876                           ;Tonche_16F877.h: 1597: ADCON1bits.PCFG0 = 0;
   877  02F7  101F               	bcf	31,0	;volatile
   878                           
   879                           ;Tonche_16F877.h: 1598: break;
   880  02F8  0008               	return
   881  02F9                     l771:	
   882                           ;Tonche_16F877.h: 1599: case 14:
   883                           
   884                           
   885                           ;Tonche_16F877.h: 1600: ADCON1bits.PCFG3 = 1;
   886  02F9  1683               	bsf	3,5	;RP0=1, select bank1
   887  02FA  1303               	bcf	3,6	;RP1=0, select bank1
   888  02FB  159F               	bsf	31,3	;volatile
   889                           
   890                           ;Tonche_16F877.h: 1601: ADCON1bits.PCFG2 = 1;
   891  02FC  151F               	bsf	31,2	;volatile
   892                           
   893                           ;Tonche_16F877.h: 1602: ADCON1bits.PCFG1 = 1;
   894  02FD  149F               	bsf	31,1	;volatile
   895                           
   896                           ;Tonche_16F877.h: 1603: ADCON1bits.PCFG0 = 1;
   897  02FE  141F               	bsf	31,0	;volatile
   898                           
   899                           ;Tonche_16F877.h: 1604: break;
   900  02FF  0008               	return
   901  0300                     l772:	
   902                           ;Tonche_16F877.h: 1605: default:
   903                           
   904                           
   905                           ;Tonche_16F877.h: 1606: ADCON1bits.PCFG3 = 0;
   906  0300  1683               	bsf	3,5	;RP0=1, select bank1
   907  0301  1303               	bcf	3,6	;RP1=0, select bank1
   908  0302  119F               	bcf	31,3	;volatile
   909                           
   910                           ;Tonche_16F877.h: 1607: ADCON1bits.PCFG2 = 0;
   911  0303  111F               	bcf	31,2	;volatile
   912                           
   913                           ;Tonche_16F877.h: 1608: ADCON1bits.PCFG1 = 0;
   914  0304  109F               	bcf	31,1	;volatile
   915                           
   916                           ;Tonche_16F877.h: 1609: ADCON1bits.PCFG0 = 0;
   917  0305  101F               	bcf	31,0	;volatile
   918                           
   919                           ;Tonche_16F877.h: 1611: }
   920                           
   921                           ;Tonche_16F877.h: 1610: break;
   922  0306  0008               	return
   923  0307                     l1429:	
   924                           
   925                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   926                           ; Switch size 1, requested type "space"
   927                           ; Number of cases is 1, Range of values is 0 to 0
   928                           ; switch strategies available:
   929                           ; Name         Instructions Cycles
   930                           ; simple_byte            4     3 (average)
   931                           ; direct_byte           11     8 (fixed)
   932                           ; jumptable            260     6 (fixed)
   933                           ;	Chosen strategy is simple_byte
   934  0307  0871               	movf	ADPortConfiguration@config+1,w
   935  0308  3A00               	xorlw	0	; case 0
   936  0309  1903               	skipnz
   937  030A  2B0C               	goto	l2811
   938  030B  2B00               	goto	l772
   939  030C                     l2811:	
   940                           
   941                           ; Switch size 1, requested type "space"
   942                           ; Number of cases is 15, Range of values is 0 to 14
   943                           ; switch strategies available:
   944                           ; Name         Instructions Cycles
   945                           ; simple_byte           46    24 (average)
   946                           ; direct_byte           53     8 (fixed)
   947                           ; jumptable            260     6 (fixed)
   948                           ;	Chosen strategy is simple_byte
   949  030C  0870               	movf	ADPortConfiguration@config,w
   950  030D  3A00               	xorlw	0	; case 0
   951  030E  1903               	skipnz
   952  030F  2A97               	goto	l756
   953  0310  3A01               	xorlw	1	; case 1
   954  0311  1903               	skipnz
   955  0312  2A9E               	goto	l758
   956  0313  3A03               	xorlw	3	; case 2
   957  0314  1903               	skipnz
   958  0315  2AA5               	goto	l759
   959  0316  3A01               	xorlw	1	; case 3
   960  0317  1903               	skipnz
   961  0318  2AAC               	goto	l760
   962  0319  3A07               	xorlw	7	; case 4
   963  031A  1903               	skipnz
   964  031B  2AB3               	goto	l761
   965  031C  3A01               	xorlw	1	; case 5
   966  031D  1903               	skipnz
   967  031E  2ABA               	goto	l762
   968  031F  3A03               	xorlw	3	; case 6
   969  0320  1903               	skipnz
   970  0321  2AC1               	goto	l763
   971  0322  3A01               	xorlw	1	; case 7
   972  0323  1903               	skipnz
   973  0324  2AC8               	goto	l764
   974  0325  3A0F               	xorlw	15	; case 8
   975  0326  1903               	skipnz
   976  0327  2ACF               	goto	l765
   977  0328  3A01               	xorlw	1	; case 9
   978  0329  1903               	skipnz
   979  032A  2AD6               	goto	l766
   980  032B  3A03               	xorlw	3	; case 10
   981  032C  1903               	skipnz
   982  032D  2ADD               	goto	l767
   983  032E  3A01               	xorlw	1	; case 11
   984  032F  1903               	skipnz
   985  0330  2AE4               	goto	l768
   986  0331  3A07               	xorlw	7	; case 12
   987  0332  1903               	skipnz
   988  0333  2AEB               	goto	l769
   989  0334  3A01               	xorlw	1	; case 13
   990  0335  1903               	skipnz
   991  0336  2AF2               	goto	l770
   992  0337  3A03               	xorlw	3	; case 14
   993  0338  1903               	skipnz
   994  0339  2AF9               	goto	l771
   995  033A  2B00               	goto	l772
   996  033B  0008               	return
   997  033C                     __end_of_ADPortConfiguration:	
   998                           
   999                           	psect	text4
  1000  01E4                     __ptext4:	
  1001 ;; *************** function _spiCLKpolarity *****************
  1002 ;; Defined at:
  1003 ;;		line 1613 in file "Tonche_16F877.h"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  polarity        1    wreg     unsigned char 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  polarity        1    0[COMMON] unsigned char 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;		None               void
  1010 ;; Registers used:
  1011 ;;		wreg
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         1       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0
  1020 ;;      Totals:         1       0       0       0       0
  1021 ;;Total ram usage:        1 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_setup
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _spiCLKpolarity
  1032  01E4                     _spiCLKpolarity:	
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _spiCLKpolarity: [wreg]
  1036                           ;spiCLKpolarity@polarity stored from wreg
  1037  01E4  00F0               	movwf	spiCLKpolarity@polarity
  1038                           
  1039                           ;Tonche_16F877.h: 1615: if(polarity == 'h')
  1040  01E5  0870               	movf	spiCLKpolarity@polarity,w
  1041  01E6  3A68               	xorlw	104
  1042  01E7  1D03               	skipz
  1043  01E8  29ED               	goto	l1939
  1044                           
  1045                           ;Tonche_16F877.h: 1616: {
  1046                           ;Tonche_16F877.h: 1617: SSPCONbits.CKP = 1;
  1047  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1048  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1049  01EB  1614               	bsf	20,4	;volatile
  1050                           
  1051                           ;Tonche_16F877.h: 1618: }
  1052  01EC  0008               	return
  1053  01ED                     l1939:	
  1054                           
  1055                           ;Tonche_16F877.h: 1619: else if(polarity == 'l')
  1056  01ED  0870               	movf	spiCLKpolarity@polarity,w
  1057  01EE  3A6C               	xorlw	108
  1058  01EF  1D03               	skipz
  1059  01F0  0008               	return
  1060                           
  1061                           ;Tonche_16F877.h: 1620: {
  1062                           ;Tonche_16F877.h: 1621: SSPCONbits.CKP = 0;
  1063  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1064  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1065  01F3  1214               	bcf	20,4	;volatile
  1066  01F4  0008               	return
  1067  01F5                     __end_of_spiCLKpolarity:	
  1068                           
  1069                           	psect	text5
  1070  0444                     __ptext5:	
  1071 ;; *************** function _portdMode *****************
  1072 ;; Defined at:
  1073 ;;		line 409 in file "Tonche_16F877.h"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  pin             2    0[COMMON] int 
  1076 ;;  mode            1    2[COMMON] unsigned char 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;		None               void
  1081 ;; Registers used:
  1082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1088 ;;      Params:         3       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0
  1091 ;;      Totals:         3       0       0       0       0
  1092 ;;Total ram usage:        3 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_setup
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _portdMode
  1103  0444                     _portdMode:	
  1104                           
  1105                           ;Tonche_16F877.h: 411: if(pin >= 8)
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _portdMode: [wreg-fsr0h+status,2+status,0+btemp+1]
  1109  0444  0871               	movf	portdMode@pin+1,w
  1110  0445  3A80               	xorlw	128
  1111  0446  00FF               	movwf	127
  1112  0447  3080               	movlw	128
  1113  0448  027F               	subwf	127,w
  1114  0449  1D03               	skipz
  1115  044A  2C4D               	goto	u385
  1116  044B  3008               	movlw	8
  1117  044C  0270               	subwf	portdMode@pin,w
  1118  044D                     u385:	
  1119  044D  1C03               	skipc
  1120  044E  2D2B               	goto	l1593
  1121                           
  1122                           ;Tonche_16F877.h: 412: {
  1123                           ;Tonche_16F877.h: 413: pin = 7;
  1124  044F  3007               	movlw	7
  1125  0450  00F0               	movwf	portdMode@pin
  1126  0451  3000               	movlw	0
  1127  0452  00F1               	movwf	portdMode@pin+1
  1128                           
  1129                           ;Tonche_16F877.h: 414: if((mode == 'I')||(mode == 'i'))
  1130  0453  0872               	movf	portdMode@mode,w
  1131  0454  3A49               	xorlw	73
  1132  0455  1903               	skipnz
  1133  0456  2C5B               	goto	l286
  1134  0457  0872               	movf	portdMode@mode,w
  1135  0458  3A69               	xorlw	105
  1136  0459  1D03               	skipz
  1137  045A  2C5F               	goto	l1523
  1138  045B                     l286:	
  1139                           
  1140                           ;Tonche_16F877.h: 415: {
  1141                           ;Tonche_16F877.h: 416: TRISCbits.TRISC7 = 1;
  1142  045B  1683               	bsf	3,5	;RP0=1, select bank1
  1143  045C  1303               	bcf	3,6	;RP1=0, select bank1
  1144  045D  1787               	bsf	7,7	;volatile
  1145                           
  1146                           ;Tonche_16F877.h: 417: }
  1147  045E  0008               	return
  1148  045F                     l1523:	
  1149                           
  1150                           ;Tonche_16F877.h: 418: else if((mode == 'O')||(mode == 'o'))
  1151  045F  0872               	movf	portdMode@mode,w
  1152  0460  3A4F               	xorlw	79
  1153  0461  1903               	skipnz
  1154  0462  2C67               	goto	l290
  1155  0463  0872               	movf	portdMode@mode,w
  1156  0464  3A6F               	xorlw	111
  1157  0465  1D03               	skipz
  1158  0466  0008               	return
  1159  0467                     l290:	
  1160                           
  1161                           ;Tonche_16F877.h: 419: {
  1162                           ;Tonche_16F877.h: 420: TRISCbits.TRISC7 = 0;
  1163  0467  1683               	bsf	3,5	;RP0=1, select bank1
  1164  0468  1303               	bcf	3,6	;RP1=0, select bank1
  1165  0469  1387               	bcf	7,7	;volatile
  1166                           
  1167                           ;Tonche_16F877.h: 421: }
  1168                           ;Tonche_16F877.h: 422: }
  1169  046A  0008               	return
  1170  046B                     l1527:	
  1171                           ;Tonche_16F877.h: 426: {
  1172                           ;Tonche_16F877.h: 427: case 0:
  1173                           
  1174                           ;Tonche_16F877.h: 423: else
  1175                           ;Tonche_16F877.h: 424: {
  1176                           ;Tonche_16F877.h: 425: switch(pin)
  1177                           
  1178                           
  1179                           ;Tonche_16F877.h: 428: if((mode == 'I')||(mode == 'i'))
  1180  046B  0872               	movf	portdMode@mode,w
  1181  046C  3A49               	xorlw	73
  1182  046D  1903               	skipnz
  1183  046E  2C73               	goto	l296
  1184  046F  0872               	movf	portdMode@mode,w
  1185  0470  3A69               	xorlw	105
  1186  0471  1D03               	skipz
  1187  0472  2C77               	goto	l1531
  1188  0473                     l296:	
  1189                           
  1190                           ;Tonche_16F877.h: 429: {
  1191                           ;Tonche_16F877.h: 430: TRISCbits.TRISC0 = 1;
  1192  0473  1683               	bsf	3,5	;RP0=1, select bank1
  1193  0474  1303               	bcf	3,6	;RP1=0, select bank1
  1194  0475  1407               	bsf	7,0	;volatile
  1195                           
  1196                           ;Tonche_16F877.h: 431: }
  1197  0476  0008               	return
  1198  0477                     l1531:	
  1199                           
  1200                           ;Tonche_16F877.h: 432: else if((mode == 'O')||(mode == 'o'))
  1201  0477  0872               	movf	portdMode@mode,w
  1202  0478  3A4F               	xorlw	79
  1203  0479  1903               	skipnz
  1204  047A  2C7F               	goto	l300
  1205  047B  0872               	movf	portdMode@mode,w
  1206  047C  3A6F               	xorlw	111
  1207  047D  1D03               	skipz
  1208  047E  0008               	return
  1209  047F                     l300:	
  1210                           
  1211                           ;Tonche_16F877.h: 433: {
  1212                           ;Tonche_16F877.h: 434: TRISCbits.TRISC0 = 0;
  1213  047F  1683               	bsf	3,5	;RP0=1, select bank1
  1214  0480  1303               	bcf	3,6	;RP1=0, select bank1
  1215  0481  1007               	bcf	7,0	;volatile
  1216                           
  1217                           ;Tonche_16F877.h: 435: }
  1218                           ;Tonche_16F877.h: 436: break;
  1219  0482  0008               	return
  1220  0483                     l1535:	
  1221                           ;Tonche_16F877.h: 437: case 1:
  1222                           
  1223                           
  1224                           ;Tonche_16F877.h: 438: if((mode == 'I')||(mode == 'i'))
  1225  0483  0872               	movf	portdMode@mode,w
  1226  0484  3A49               	xorlw	73
  1227  0485  1903               	skipnz
  1228  0486  2C8B               	goto	l305
  1229  0487  0872               	movf	portdMode@mode,w
  1230  0488  3A69               	xorlw	105
  1231  0489  1D03               	skipz
  1232  048A  2C8F               	goto	l1539
  1233  048B                     l305:	
  1234                           
  1235                           ;Tonche_16F877.h: 439: {
  1236                           ;Tonche_16F877.h: 440: TRISCbits.TRISC1 = 1;
  1237  048B  1683               	bsf	3,5	;RP0=1, select bank1
  1238  048C  1303               	bcf	3,6	;RP1=0, select bank1
  1239  048D  1487               	bsf	7,1	;volatile
  1240                           
  1241                           ;Tonche_16F877.h: 441: }
  1242  048E  0008               	return
  1243  048F                     l1539:	
  1244                           
  1245                           ;Tonche_16F877.h: 442: else if((mode == 'O')||(mode == 'o'))
  1246  048F  0872               	movf	portdMode@mode,w
  1247  0490  3A4F               	xorlw	79
  1248  0491  1903               	skipnz
  1249  0492  2C97               	goto	l309
  1250  0493  0872               	movf	portdMode@mode,w
  1251  0494  3A6F               	xorlw	111
  1252  0495  1D03               	skipz
  1253  0496  0008               	return
  1254  0497                     l309:	
  1255                           
  1256                           ;Tonche_16F877.h: 443: {
  1257                           ;Tonche_16F877.h: 444: TRISCbits.TRISC1 = 0;
  1258  0497  1683               	bsf	3,5	;RP0=1, select bank1
  1259  0498  1303               	bcf	3,6	;RP1=0, select bank1
  1260  0499  1087               	bcf	7,1	;volatile
  1261                           
  1262                           ;Tonche_16F877.h: 445: }
  1263                           ;Tonche_16F877.h: 446: break;
  1264  049A  0008               	return
  1265  049B                     l1543:	
  1266                           ;Tonche_16F877.h: 447: case 2:
  1267                           
  1268                           
  1269                           ;Tonche_16F877.h: 448: if((mode == 'I')||(mode == 'i'))
  1270  049B  0872               	movf	portdMode@mode,w
  1271  049C  3A49               	xorlw	73
  1272  049D  1903               	skipnz
  1273  049E  2CA3               	goto	l313
  1274  049F  0872               	movf	portdMode@mode,w
  1275  04A0  3A69               	xorlw	105
  1276  04A1  1D03               	skipz
  1277  04A2  2CA7               	goto	l1547
  1278  04A3                     l313:	
  1279                           
  1280                           ;Tonche_16F877.h: 449: {
  1281                           ;Tonche_16F877.h: 450: TRISCbits.TRISC2 = 1;
  1282  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  1283  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  1284  04A5  1507               	bsf	7,2	;volatile
  1285                           
  1286                           ;Tonche_16F877.h: 451: }
  1287  04A6  0008               	return
  1288  04A7                     l1547:	
  1289                           
  1290                           ;Tonche_16F877.h: 452: else if((mode == 'O')||(mode == 'o'))
  1291  04A7  0872               	movf	portdMode@mode,w
  1292  04A8  3A4F               	xorlw	79
  1293  04A9  1903               	skipnz
  1294  04AA  2CAF               	goto	l317
  1295  04AB  0872               	movf	portdMode@mode,w
  1296  04AC  3A6F               	xorlw	111
  1297  04AD  1D03               	skipz
  1298  04AE  0008               	return
  1299  04AF                     l317:	
  1300                           
  1301                           ;Tonche_16F877.h: 453: {
  1302                           ;Tonche_16F877.h: 454: TRISCbits.TRISC2 = 0;
  1303  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  1304  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  1305  04B1  1107               	bcf	7,2	;volatile
  1306                           
  1307                           ;Tonche_16F877.h: 455: }
  1308                           ;Tonche_16F877.h: 456: break;
  1309  04B2  0008               	return
  1310  04B3                     l1551:	
  1311                           ;Tonche_16F877.h: 457: case 3:
  1312                           
  1313                           
  1314                           ;Tonche_16F877.h: 458: if((mode == 'I')||(mode == 'i'))
  1315  04B3  0872               	movf	portdMode@mode,w
  1316  04B4  3A49               	xorlw	73
  1317  04B5  1903               	skipnz
  1318  04B6  2CBB               	goto	l321
  1319  04B7  0872               	movf	portdMode@mode,w
  1320  04B8  3A69               	xorlw	105
  1321  04B9  1D03               	skipz
  1322  04BA  2CBF               	goto	l1555
  1323  04BB                     l321:	
  1324                           
  1325                           ;Tonche_16F877.h: 459: {
  1326                           ;Tonche_16F877.h: 460: TRISCbits.TRISC3 = 1;
  1327  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  1328  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  1329  04BD  1587               	bsf	7,3	;volatile
  1330                           
  1331                           ;Tonche_16F877.h: 461: }
  1332  04BE  0008               	return
  1333  04BF                     l1555:	
  1334                           
  1335                           ;Tonche_16F877.h: 462: else if((mode == 'O')||(mode == 'o'))
  1336  04BF  0872               	movf	portdMode@mode,w
  1337  04C0  3A4F               	xorlw	79
  1338  04C1  1903               	skipnz
  1339  04C2  2CC7               	goto	l325
  1340  04C3  0872               	movf	portdMode@mode,w
  1341  04C4  3A6F               	xorlw	111
  1342  04C5  1D03               	skipz
  1343  04C6  0008               	return
  1344  04C7                     l325:	
  1345                           
  1346                           ;Tonche_16F877.h: 463: {
  1347                           ;Tonche_16F877.h: 464: TRISCbits.TRISC3 = 0;
  1348  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  1349  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  1350  04C9  1187               	bcf	7,3	;volatile
  1351                           
  1352                           ;Tonche_16F877.h: 465: }
  1353                           ;Tonche_16F877.h: 466: break;
  1354  04CA  0008               	return
  1355  04CB                     l1559:	
  1356                           ;Tonche_16F877.h: 467: case 4:
  1357                           
  1358                           
  1359                           ;Tonche_16F877.h: 468: if((mode == 'I')||(mode == 'i'))
  1360  04CB  0872               	movf	portdMode@mode,w
  1361  04CC  3A49               	xorlw	73
  1362  04CD  1903               	skipnz
  1363  04CE  2CD3               	goto	l329
  1364  04CF  0872               	movf	portdMode@mode,w
  1365  04D0  3A69               	xorlw	105
  1366  04D1  1D03               	skipz
  1367  04D2  2CD7               	goto	l1563
  1368  04D3                     l329:	
  1369                           
  1370                           ;Tonche_16F877.h: 469: {
  1371                           ;Tonche_16F877.h: 470: TRISCbits.TRISC4 = 1;
  1372  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  1373  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  1374  04D5  1607               	bsf	7,4	;volatile
  1375                           
  1376                           ;Tonche_16F877.h: 471: }
  1377  04D6  0008               	return
  1378  04D7                     l1563:	
  1379                           
  1380                           ;Tonche_16F877.h: 472: else if((mode == 'O')||(mode == 'o'))
  1381  04D7  0872               	movf	portdMode@mode,w
  1382  04D8  3A4F               	xorlw	79
  1383  04D9  1903               	skipnz
  1384  04DA  2CDF               	goto	l333
  1385  04DB  0872               	movf	portdMode@mode,w
  1386  04DC  3A6F               	xorlw	111
  1387  04DD  1D03               	skipz
  1388  04DE  0008               	return
  1389  04DF                     l333:	
  1390                           
  1391                           ;Tonche_16F877.h: 473: {
  1392                           ;Tonche_16F877.h: 474: TRISCbits.TRISC4 = 0;
  1393  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  1394  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  1395  04E1  1207               	bcf	7,4	;volatile
  1396                           
  1397                           ;Tonche_16F877.h: 475: }
  1398                           ;Tonche_16F877.h: 476: break;
  1399  04E2  0008               	return
  1400  04E3                     l1567:	
  1401                           ;Tonche_16F877.h: 477: case 5:
  1402                           
  1403                           
  1404                           ;Tonche_16F877.h: 478: if((mode == 'I')||(mode == 'i'))
  1405  04E3  0872               	movf	portdMode@mode,w
  1406  04E4  3A49               	xorlw	73
  1407  04E5  1903               	skipnz
  1408  04E6  2CEB               	goto	l337
  1409  04E7  0872               	movf	portdMode@mode,w
  1410  04E8  3A69               	xorlw	105
  1411  04E9  1D03               	skipz
  1412  04EA  2CEF               	goto	l1571
  1413  04EB                     l337:	
  1414                           
  1415                           ;Tonche_16F877.h: 479: {
  1416                           ;Tonche_16F877.h: 480: TRISCbits.TRISC5 = 1;
  1417  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  1418  04EC  1303               	bcf	3,6	;RP1=0, select bank1
  1419  04ED  1687               	bsf	7,5	;volatile
  1420                           
  1421                           ;Tonche_16F877.h: 481: }
  1422  04EE  0008               	return
  1423  04EF                     l1571:	
  1424                           
  1425                           ;Tonche_16F877.h: 482: else if((mode == 'O')||(mode == 'o'))
  1426  04EF  0872               	movf	portdMode@mode,w
  1427  04F0  3A4F               	xorlw	79
  1428  04F1  1903               	skipnz
  1429  04F2  2CF7               	goto	l341
  1430  04F3  0872               	movf	portdMode@mode,w
  1431  04F4  3A6F               	xorlw	111
  1432  04F5  1D03               	skipz
  1433  04F6  0008               	return
  1434  04F7                     l341:	
  1435                           
  1436                           ;Tonche_16F877.h: 483: {
  1437                           ;Tonche_16F877.h: 484: TRISCbits.TRISC5 = 0;
  1438  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  1439  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  1440  04F9  1287               	bcf	7,5	;volatile
  1441                           
  1442                           ;Tonche_16F877.h: 485: }
  1443                           ;Tonche_16F877.h: 486: break;
  1444  04FA  0008               	return
  1445  04FB                     l1575:	
  1446                           ;Tonche_16F877.h: 487: case 6:
  1447                           
  1448                           
  1449                           ;Tonche_16F877.h: 488: if((mode == 'I')||(mode == 'i'))
  1450  04FB  0872               	movf	portdMode@mode,w
  1451  04FC  3A49               	xorlw	73
  1452  04FD  1903               	skipnz
  1453  04FE  2D03               	goto	l345
  1454  04FF  0872               	movf	portdMode@mode,w
  1455  0500  3A69               	xorlw	105
  1456  0501  1D03               	skipz
  1457  0502  2D07               	goto	l1579
  1458  0503                     l345:	
  1459                           
  1460                           ;Tonche_16F877.h: 489: {
  1461                           ;Tonche_16F877.h: 490: TRISCbits.TRISC6 = 1;
  1462  0503  1683               	bsf	3,5	;RP0=1, select bank1
  1463  0504  1303               	bcf	3,6	;RP1=0, select bank1
  1464  0505  1707               	bsf	7,6	;volatile
  1465                           
  1466                           ;Tonche_16F877.h: 491: }
  1467  0506  0008               	return
  1468  0507                     l1579:	
  1469                           
  1470                           ;Tonche_16F877.h: 492: else if((mode == 'O')||(mode == 'o'))
  1471  0507  0872               	movf	portdMode@mode,w
  1472  0508  3A4F               	xorlw	79
  1473  0509  1903               	skipnz
  1474  050A  2D0F               	goto	l349
  1475  050B  0872               	movf	portdMode@mode,w
  1476  050C  3A6F               	xorlw	111
  1477  050D  1D03               	skipz
  1478  050E  0008               	return
  1479  050F                     l349:	
  1480                           
  1481                           ;Tonche_16F877.h: 493: {
  1482                           ;Tonche_16F877.h: 494: TRISCbits.TRISC6 = 0;
  1483  050F  1683               	bsf	3,5	;RP0=1, select bank1
  1484  0510  1303               	bcf	3,6	;RP1=0, select bank1
  1485  0511  1307               	bcf	7,6	;volatile
  1486                           
  1487                           ;Tonche_16F877.h: 495: }
  1488                           ;Tonche_16F877.h: 496: break;
  1489  0512  0008               	return
  1490  0513                     l1583:	
  1491                           ;Tonche_16F877.h: 497: case 7:
  1492                           
  1493                           
  1494                           ;Tonche_16F877.h: 498: if((mode == 'I')||(mode == 'i'))
  1495  0513  0872               	movf	portdMode@mode,w
  1496  0514  3A49               	xorlw	73
  1497  0515  1903               	skipnz
  1498  0516  2D1B               	goto	l353
  1499  0517  0872               	movf	portdMode@mode,w
  1500  0518  3A69               	xorlw	105
  1501  0519  1D03               	skipz
  1502  051A  2D1F               	goto	l1587
  1503  051B                     l353:	
  1504                           
  1505                           ;Tonche_16F877.h: 499: {
  1506                           ;Tonche_16F877.h: 500: TRISCbits.TRISC7 = 1;
  1507  051B  1683               	bsf	3,5	;RP0=1, select bank1
  1508  051C  1303               	bcf	3,6	;RP1=0, select bank1
  1509  051D  1787               	bsf	7,7	;volatile
  1510                           
  1511                           ;Tonche_16F877.h: 501: }
  1512  051E  0008               	return
  1513  051F                     l1587:	
  1514                           
  1515                           ;Tonche_16F877.h: 502: else if((mode == 'O')||(mode == 'o'))
  1516  051F  0872               	movf	portdMode@mode,w
  1517  0520  3A4F               	xorlw	79
  1518  0521  1903               	skipnz
  1519  0522  2D27               	goto	l357
  1520  0523  0872               	movf	portdMode@mode,w
  1521  0524  3A6F               	xorlw	111
  1522  0525  1D03               	skipz
  1523  0526  0008               	return
  1524  0527                     l357:	
  1525                           
  1526                           ;Tonche_16F877.h: 503: {
  1527                           ;Tonche_16F877.h: 504: TRISCbits.TRISC7 = 0;
  1528  0527  1683               	bsf	3,5	;RP0=1, select bank1
  1529  0528  1303               	bcf	3,6	;RP1=0, select bank1
  1530  0529  1387               	bcf	7,7	;volatile
  1531                           
  1532                           ;Tonche_16F877.h: 507: }
  1533                           
  1534                           ;Tonche_16F877.h: 505: }
  1535                           ;Tonche_16F877.h: 506: break;
  1536  052A  0008               	return
  1537  052B                     l1593:	
  1538                           
  1539                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1540                           ; Switch size 1, requested type "space"
  1541                           ; Number of cases is 1, Range of values is 0 to 0
  1542                           ; switch strategies available:
  1543                           ; Name         Instructions Cycles
  1544                           ; simple_byte            4     3 (average)
  1545                           ; direct_byte           11     8 (fixed)
  1546                           ; jumptable            260     6 (fixed)
  1547                           ;	Chosen strategy is simple_byte
  1548  052B  0871               	movf	portdMode@pin+1,w
  1549  052C  3A00               	xorlw	0	; case 0
  1550  052D  1903               	skipnz
  1551  052E  2D30               	goto	l2813
  1552  052F  2D4B               	goto	l358
  1553  0530                     l2813:	
  1554                           
  1555                           ; Switch size 1, requested type "space"
  1556                           ; Number of cases is 8, Range of values is 0 to 7
  1557                           ; switch strategies available:
  1558                           ; Name         Instructions Cycles
  1559                           ; simple_byte           25    13 (average)
  1560                           ; direct_byte           32     8 (fixed)
  1561                           ; jumptable            260     6 (fixed)
  1562                           ;	Chosen strategy is simple_byte
  1563  0530  0870               	movf	portdMode@pin,w
  1564  0531  3A00               	xorlw	0	; case 0
  1565  0532  1903               	skipnz
  1566  0533  2C6B               	goto	l1527
  1567  0534  3A01               	xorlw	1	; case 1
  1568  0535  1903               	skipnz
  1569  0536  2C83               	goto	l1535
  1570  0537  3A03               	xorlw	3	; case 2
  1571  0538  1903               	skipnz
  1572  0539  2C9B               	goto	l1543
  1573  053A  3A01               	xorlw	1	; case 3
  1574  053B  1903               	skipnz
  1575  053C  2CB3               	goto	l1551
  1576  053D  3A07               	xorlw	7	; case 4
  1577  053E  1903               	skipnz
  1578  053F  2CCB               	goto	l1559
  1579  0540  3A01               	xorlw	1	; case 5
  1580  0541  1903               	skipnz
  1581  0542  2CE3               	goto	l1567
  1582  0543  3A03               	xorlw	3	; case 6
  1583  0544  1903               	skipnz
  1584  0545  2CFB               	goto	l1575
  1585  0546  3A01               	xorlw	1	; case 7
  1586  0547  1903               	skipnz
  1587  0548  2D13               	goto	l1583
  1588  0549  2D4B               	goto	l358
  1589  054A  0008               	return
  1590  054B                     l358:	
  1591  054B  0008               	return
  1592  054C                     __end_of_portdMode:	
  1593                           
  1594                           	psect	text6
  1595  033C                     __ptext6:	
  1596 ;; *************** function _portbMode *****************
  1597 ;; Defined at:
  1598 ;;		line 207 in file "Tonche_16F877.h"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  pin             2    0[COMMON] int 
  1601 ;;  mode            1    2[COMMON] unsigned char 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;		None               void
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         3       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         3       0       0       0       0
  1617 ;;Total ram usage:        3 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_setup
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _portbMode
  1628  033C                     _portbMode:	
  1629                           
  1630                           ;Tonche_16F877.h: 209: if(pin >= 8)
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _portbMode: [wreg-fsr0h+status,2+status,0+btemp+1]
  1634  033C  0871               	movf	portbMode@pin+1,w
  1635  033D  3A80               	xorlw	128
  1636  033E  00FF               	movwf	127
  1637  033F  3080               	movlw	128
  1638  0340  027F               	subwf	127,w
  1639  0341  1D03               	skipz
  1640  0342  2B45               	goto	u15
  1641  0343  3008               	movlw	8
  1642  0344  0270               	subwf	portbMode@pin,w
  1643  0345                     u15:	
  1644  0345  1C03               	skipc
  1645  0346  2C23               	goto	l1511
  1646                           
  1647                           ;Tonche_16F877.h: 210: {
  1648                           ;Tonche_16F877.h: 211: pin = 7;
  1649  0347  3007               	movlw	7
  1650  0348  00F0               	movwf	portbMode@pin
  1651  0349  3000               	movlw	0
  1652  034A  00F1               	movwf	portbMode@pin+1
  1653                           
  1654                           ;Tonche_16F877.h: 212: if((mode == 'I') || (mode == 'i'))
  1655  034B  0872               	movf	portbMode@mode,w
  1656  034C  3A49               	xorlw	73
  1657  034D  1903               	skipnz
  1658  034E  2B53               	goto	l130
  1659  034F  0872               	movf	portbMode@mode,w
  1660  0350  3A69               	xorlw	105
  1661  0351  1D03               	skipz
  1662  0352  2B57               	goto	l1441
  1663  0353                     l130:	
  1664                           
  1665                           ;Tonche_16F877.h: 213: {
  1666                           ;Tonche_16F877.h: 214: TRISBbits.TRISB7 = 1;
  1667  0353  1683               	bsf	3,5	;RP0=1, select bank1
  1668  0354  1303               	bcf	3,6	;RP1=0, select bank1
  1669  0355  1786               	bsf	6,7	;volatile
  1670                           
  1671                           ;Tonche_16F877.h: 215: }
  1672  0356  0008               	return
  1673  0357                     l1441:	
  1674                           
  1675                           ;Tonche_16F877.h: 216: else if((mode == 'O')||(mode == 'o'))
  1676  0357  0872               	movf	portbMode@mode,w
  1677  0358  3A4F               	xorlw	79
  1678  0359  1903               	skipnz
  1679  035A  2B5F               	goto	l134
  1680  035B  0872               	movf	portbMode@mode,w
  1681  035C  3A6F               	xorlw	111
  1682  035D  1D03               	skipz
  1683  035E  0008               	return
  1684  035F                     l134:	
  1685                           
  1686                           ;Tonche_16F877.h: 217: {
  1687                           ;Tonche_16F877.h: 218: TRISBbits.TRISB7 = 0;
  1688  035F  1683               	bsf	3,5	;RP0=1, select bank1
  1689  0360  1303               	bcf	3,6	;RP1=0, select bank1
  1690  0361  1386               	bcf	6,7	;volatile
  1691                           
  1692                           ;Tonche_16F877.h: 219: }
  1693                           ;Tonche_16F877.h: 220: }
  1694  0362  0008               	return
  1695  0363                     l1445:	
  1696                           ;Tonche_16F877.h: 224: {
  1697                           ;Tonche_16F877.h: 225: case 0:
  1698                           
  1699                           ;Tonche_16F877.h: 221: else
  1700                           ;Tonche_16F877.h: 222: {
  1701                           ;Tonche_16F877.h: 223: switch(pin)
  1702                           
  1703                           
  1704                           ;Tonche_16F877.h: 226: if((mode == 'I')||(mode == 'i'))
  1705  0363  0872               	movf	portbMode@mode,w
  1706  0364  3A49               	xorlw	73
  1707  0365  1903               	skipnz
  1708  0366  2B6B               	goto	l140
  1709  0367  0872               	movf	portbMode@mode,w
  1710  0368  3A69               	xorlw	105
  1711  0369  1D03               	skipz
  1712  036A  2B6F               	goto	l1449
  1713  036B                     l140:	
  1714                           
  1715                           ;Tonche_16F877.h: 227: {
  1716                           ;Tonche_16F877.h: 228: TRISBbits.TRISB0 = 1;
  1717  036B  1683               	bsf	3,5	;RP0=1, select bank1
  1718  036C  1303               	bcf	3,6	;RP1=0, select bank1
  1719  036D  1406               	bsf	6,0	;volatile
  1720                           
  1721                           ;Tonche_16F877.h: 229: }
  1722  036E  0008               	return
  1723  036F                     l1449:	
  1724                           
  1725                           ;Tonche_16F877.h: 230: else if((mode == 'O')||(mode == 'o'))
  1726  036F  0872               	movf	portbMode@mode,w
  1727  0370  3A4F               	xorlw	79
  1728  0371  1903               	skipnz
  1729  0372  2B77               	goto	l144
  1730  0373  0872               	movf	portbMode@mode,w
  1731  0374  3A6F               	xorlw	111
  1732  0375  1D03               	skipz
  1733  0376  0008               	return
  1734  0377                     l144:	
  1735                           
  1736                           ;Tonche_16F877.h: 231: {
  1737                           ;Tonche_16F877.h: 232: TRISBbits.TRISB0 = 0;
  1738  0377  1683               	bsf	3,5	;RP0=1, select bank1
  1739  0378  1303               	bcf	3,6	;RP1=0, select bank1
  1740  0379  1006               	bcf	6,0	;volatile
  1741                           
  1742                           ;Tonche_16F877.h: 233: }
  1743                           ;Tonche_16F877.h: 234: break;
  1744  037A  0008               	return
  1745  037B                     l1453:	
  1746                           ;Tonche_16F877.h: 235: case 1:
  1747                           
  1748                           
  1749                           ;Tonche_16F877.h: 236: if((mode == 'I')||(mode == 'i'))
  1750  037B  0872               	movf	portbMode@mode,w
  1751  037C  3A49               	xorlw	73
  1752  037D  1903               	skipnz
  1753  037E  2B83               	goto	l149
  1754  037F  0872               	movf	portbMode@mode,w
  1755  0380  3A69               	xorlw	105
  1756  0381  1D03               	skipz
  1757  0382  2B87               	goto	l1457
  1758  0383                     l149:	
  1759                           
  1760                           ;Tonche_16F877.h: 237: {
  1761                           ;Tonche_16F877.h: 238: TRISBbits.TRISB1 = 1;
  1762  0383  1683               	bsf	3,5	;RP0=1, select bank1
  1763  0384  1303               	bcf	3,6	;RP1=0, select bank1
  1764  0385  1486               	bsf	6,1	;volatile
  1765                           
  1766                           ;Tonche_16F877.h: 239: }
  1767  0386  0008               	return
  1768  0387                     l1457:	
  1769                           
  1770                           ;Tonche_16F877.h: 240: else if((mode == 'O')||(mode == 'o'))
  1771  0387  0872               	movf	portbMode@mode,w
  1772  0388  3A4F               	xorlw	79
  1773  0389  1903               	skipnz
  1774  038A  2B8F               	goto	l153
  1775  038B  0872               	movf	portbMode@mode,w
  1776  038C  3A6F               	xorlw	111
  1777  038D  1D03               	skipz
  1778  038E  0008               	return
  1779  038F                     l153:	
  1780                           
  1781                           ;Tonche_16F877.h: 241: {
  1782                           ;Tonche_16F877.h: 242: TRISBbits.TRISB1 = 0;
  1783  038F  1683               	bsf	3,5	;RP0=1, select bank1
  1784  0390  1303               	bcf	3,6	;RP1=0, select bank1
  1785  0391  1086               	bcf	6,1	;volatile
  1786                           
  1787                           ;Tonche_16F877.h: 243: }
  1788                           ;Tonche_16F877.h: 244: break;
  1789  0392  0008               	return
  1790  0393                     l1461:	
  1791                           ;Tonche_16F877.h: 245: case 2:
  1792                           
  1793                           
  1794                           ;Tonche_16F877.h: 246: if((mode == 'I')||(mode == 'i'))
  1795  0393  0872               	movf	portbMode@mode,w
  1796  0394  3A49               	xorlw	73
  1797  0395  1903               	skipnz
  1798  0396  2B9B               	goto	l157
  1799  0397  0872               	movf	portbMode@mode,w
  1800  0398  3A69               	xorlw	105
  1801  0399  1D03               	skipz
  1802  039A  2B9F               	goto	l1465
  1803  039B                     l157:	
  1804                           
  1805                           ;Tonche_16F877.h: 247: {
  1806                           ;Tonche_16F877.h: 248: TRISBbits.TRISB2 = 1;
  1807  039B  1683               	bsf	3,5	;RP0=1, select bank1
  1808  039C  1303               	bcf	3,6	;RP1=0, select bank1
  1809  039D  1506               	bsf	6,2	;volatile
  1810                           
  1811                           ;Tonche_16F877.h: 249: }
  1812  039E  0008               	return
  1813  039F                     l1465:	
  1814                           
  1815                           ;Tonche_16F877.h: 250: else if((mode == 'O')||(mode == 'o'))
  1816  039F  0872               	movf	portbMode@mode,w
  1817  03A0  3A4F               	xorlw	79
  1818  03A1  1903               	skipnz
  1819  03A2  2BA7               	goto	l161
  1820  03A3  0872               	movf	portbMode@mode,w
  1821  03A4  3A6F               	xorlw	111
  1822  03A5  1D03               	skipz
  1823  03A6  0008               	return
  1824  03A7                     l161:	
  1825                           
  1826                           ;Tonche_16F877.h: 251: {
  1827                           ;Tonche_16F877.h: 252: TRISBbits.TRISB2 = 0;
  1828  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  1829  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  1830  03A9  1106               	bcf	6,2	;volatile
  1831                           
  1832                           ;Tonche_16F877.h: 253: }
  1833                           ;Tonche_16F877.h: 254: break;
  1834  03AA  0008               	return
  1835  03AB                     l1469:	
  1836                           ;Tonche_16F877.h: 255: case 3:
  1837                           
  1838                           
  1839                           ;Tonche_16F877.h: 256: if((mode == 'I')||(mode == 'i'))
  1840  03AB  0872               	movf	portbMode@mode,w
  1841  03AC  3A49               	xorlw	73
  1842  03AD  1903               	skipnz
  1843  03AE  2BB3               	goto	l165
  1844  03AF  0872               	movf	portbMode@mode,w
  1845  03B0  3A69               	xorlw	105
  1846  03B1  1D03               	skipz
  1847  03B2  2BB7               	goto	l1473
  1848  03B3                     l165:	
  1849                           
  1850                           ;Tonche_16F877.h: 257: {
  1851                           ;Tonche_16F877.h: 258: TRISBbits.TRISB3 = 1;
  1852  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  1853  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  1854  03B5  1586               	bsf	6,3	;volatile
  1855                           
  1856                           ;Tonche_16F877.h: 259: }
  1857  03B6  0008               	return
  1858  03B7                     l1473:	
  1859                           
  1860                           ;Tonche_16F877.h: 260: else if((mode == 'O')||(mode == 'o'))
  1861  03B7  0872               	movf	portbMode@mode,w
  1862  03B8  3A4F               	xorlw	79
  1863  03B9  1903               	skipnz
  1864  03BA  2BBF               	goto	l169
  1865  03BB  0872               	movf	portbMode@mode,w
  1866  03BC  3A6F               	xorlw	111
  1867  03BD  1D03               	skipz
  1868  03BE  0008               	return
  1869  03BF                     l169:	
  1870                           
  1871                           ;Tonche_16F877.h: 261: {
  1872                           ;Tonche_16F877.h: 262: TRISBbits.TRISB3 = 0;
  1873  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  1874  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  1875  03C1  1186               	bcf	6,3	;volatile
  1876                           
  1877                           ;Tonche_16F877.h: 263: }
  1878                           ;Tonche_16F877.h: 264: break;
  1879  03C2  0008               	return
  1880  03C3                     l1477:	
  1881                           ;Tonche_16F877.h: 265: case 4:
  1882                           
  1883                           
  1884                           ;Tonche_16F877.h: 266: if((mode == 'I')||(mode == 'i'))
  1885  03C3  0872               	movf	portbMode@mode,w
  1886  03C4  3A49               	xorlw	73
  1887  03C5  1903               	skipnz
  1888  03C6  2BCB               	goto	l173
  1889  03C7  0872               	movf	portbMode@mode,w
  1890  03C8  3A69               	xorlw	105
  1891  03C9  1D03               	skipz
  1892  03CA  2BCF               	goto	l1481
  1893  03CB                     l173:	
  1894                           
  1895                           ;Tonche_16F877.h: 267: {
  1896                           ;Tonche_16F877.h: 268: TRISBbits.TRISB4 = 1;
  1897  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  1898  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  1899  03CD  1606               	bsf	6,4	;volatile
  1900                           
  1901                           ;Tonche_16F877.h: 269: }
  1902  03CE  0008               	return
  1903  03CF                     l1481:	
  1904                           
  1905                           ;Tonche_16F877.h: 270: else if((mode == 'O')||(mode == 'o'))
  1906  03CF  0872               	movf	portbMode@mode,w
  1907  03D0  3A4F               	xorlw	79
  1908  03D1  1903               	skipnz
  1909  03D2  2BD7               	goto	l177
  1910  03D3  0872               	movf	portbMode@mode,w
  1911  03D4  3A6F               	xorlw	111
  1912  03D5  1D03               	skipz
  1913  03D6  0008               	return
  1914  03D7                     l177:	
  1915                           
  1916                           ;Tonche_16F877.h: 271: {
  1917                           ;Tonche_16F877.h: 272: TRISBbits.TRISB4 = 0;
  1918  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  1919  03D8  1303               	bcf	3,6	;RP1=0, select bank1
  1920  03D9  1206               	bcf	6,4	;volatile
  1921                           
  1922                           ;Tonche_16F877.h: 273: }
  1923                           ;Tonche_16F877.h: 274: break;
  1924  03DA  0008               	return
  1925  03DB                     l1485:	
  1926                           ;Tonche_16F877.h: 275: case 5:
  1927                           
  1928                           
  1929                           ;Tonche_16F877.h: 276: if((mode == 'I')||(mode == 'i'))
  1930  03DB  0872               	movf	portbMode@mode,w
  1931  03DC  3A49               	xorlw	73
  1932  03DD  1903               	skipnz
  1933  03DE  2BE3               	goto	l181
  1934  03DF  0872               	movf	portbMode@mode,w
  1935  03E0  3A69               	xorlw	105
  1936  03E1  1D03               	skipz
  1937  03E2  2BE7               	goto	l1489
  1938  03E3                     l181:	
  1939                           
  1940                           ;Tonche_16F877.h: 277: {
  1941                           ;Tonche_16F877.h: 278: TRISBbits.TRISB5 = 1;
  1942  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  1943  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  1944  03E5  1686               	bsf	6,5	;volatile
  1945                           
  1946                           ;Tonche_16F877.h: 279: }
  1947  03E6  0008               	return
  1948  03E7                     l1489:	
  1949                           
  1950                           ;Tonche_16F877.h: 280: else if((mode == 'O')||(mode == 'o'))
  1951  03E7  0872               	movf	portbMode@mode,w
  1952  03E8  3A4F               	xorlw	79
  1953  03E9  1903               	skipnz
  1954  03EA  2BEF               	goto	l185
  1955  03EB  0872               	movf	portbMode@mode,w
  1956  03EC  3A6F               	xorlw	111
  1957  03ED  1D03               	skipz
  1958  03EE  0008               	return
  1959  03EF                     l185:	
  1960                           
  1961                           ;Tonche_16F877.h: 281: {
  1962                           ;Tonche_16F877.h: 282: TRISBbits.TRISB5 = 0;
  1963  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  1964  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  1965  03F1  1286               	bcf	6,5	;volatile
  1966                           
  1967                           ;Tonche_16F877.h: 283: }
  1968                           ;Tonche_16F877.h: 284: break;
  1969  03F2  0008               	return
  1970  03F3                     l1493:	
  1971                           ;Tonche_16F877.h: 285: case 6:
  1972                           
  1973                           
  1974                           ;Tonche_16F877.h: 286: if((mode == 'I')||(mode == 'i'))
  1975  03F3  0872               	movf	portbMode@mode,w
  1976  03F4  3A49               	xorlw	73
  1977  03F5  1903               	skipnz
  1978  03F6  2BFB               	goto	l189
  1979  03F7  0872               	movf	portbMode@mode,w
  1980  03F8  3A69               	xorlw	105
  1981  03F9  1D03               	skipz
  1982  03FA  2BFF               	goto	l1497
  1983  03FB                     l189:	
  1984                           
  1985                           ;Tonche_16F877.h: 287: {
  1986                           ;Tonche_16F877.h: 288: TRISBbits.TRISB6 = 1;
  1987  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  1988  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  1989  03FD  1706               	bsf	6,6	;volatile
  1990                           
  1991                           ;Tonche_16F877.h: 289: }
  1992  03FE  0008               	return
  1993  03FF                     l1497:	
  1994                           
  1995                           ;Tonche_16F877.h: 290: else if((mode == 'O')||(mode == 'o'))
  1996  03FF  0872               	movf	portbMode@mode,w
  1997  0400  3A4F               	xorlw	79
  1998  0401  1903               	skipnz
  1999  0402  2C07               	goto	l193
  2000  0403  0872               	movf	portbMode@mode,w
  2001  0404  3A6F               	xorlw	111
  2002  0405  1D03               	skipz
  2003  0406  0008               	return
  2004  0407                     l193:	
  2005                           
  2006                           ;Tonche_16F877.h: 291: {
  2007                           ;Tonche_16F877.h: 292: TRISBbits.TRISB6 = 0;
  2008  0407  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0408  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0409  1306               	bcf	6,6	;volatile
  2011                           
  2012                           ;Tonche_16F877.h: 293: }
  2013                           ;Tonche_16F877.h: 294: break;
  2014  040A  0008               	return
  2015  040B                     l1501:	
  2016                           ;Tonche_16F877.h: 295: case 7:
  2017                           
  2018                           
  2019                           ;Tonche_16F877.h: 296: if((mode == 'I')||(mode == 'i'))
  2020  040B  0872               	movf	portbMode@mode,w
  2021  040C  3A49               	xorlw	73
  2022  040D  1903               	skipnz
  2023  040E  2C13               	goto	l197
  2024  040F  0872               	movf	portbMode@mode,w
  2025  0410  3A69               	xorlw	105
  2026  0411  1D03               	skipz
  2027  0412  2C17               	goto	l1505
  2028  0413                     l197:	
  2029                           
  2030                           ;Tonche_16F877.h: 297: {
  2031                           ;Tonche_16F877.h: 298: TRISBbits.TRISB7 = 1;
  2032  0413  1683               	bsf	3,5	;RP0=1, select bank1
  2033  0414  1303               	bcf	3,6	;RP1=0, select bank1
  2034  0415  1786               	bsf	6,7	;volatile
  2035                           
  2036                           ;Tonche_16F877.h: 299: }
  2037  0416  0008               	return
  2038  0417                     l1505:	
  2039                           
  2040                           ;Tonche_16F877.h: 300: else if((mode == 'O')||(mode == 'o'))
  2041  0417  0872               	movf	portbMode@mode,w
  2042  0418  3A4F               	xorlw	79
  2043  0419  1903               	skipnz
  2044  041A  2C1F               	goto	l201
  2045  041B  0872               	movf	portbMode@mode,w
  2046  041C  3A6F               	xorlw	111
  2047  041D  1D03               	skipz
  2048  041E  0008               	return
  2049  041F                     l201:	
  2050                           
  2051                           ;Tonche_16F877.h: 301: {
  2052                           ;Tonche_16F877.h: 302: TRISBbits.TRISB7 = 0;
  2053  041F  1683               	bsf	3,5	;RP0=1, select bank1
  2054  0420  1303               	bcf	3,6	;RP1=0, select bank1
  2055  0421  1386               	bcf	6,7	;volatile
  2056                           
  2057                           ;Tonche_16F877.h: 305: }
  2058                           
  2059                           ;Tonche_16F877.h: 303: }
  2060                           ;Tonche_16F877.h: 304: break;
  2061  0422  0008               	return
  2062  0423                     l1511:	
  2063                           
  2064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2065                           ; Switch size 1, requested type "space"
  2066                           ; Number of cases is 1, Range of values is 0 to 0
  2067                           ; switch strategies available:
  2068                           ; Name         Instructions Cycles
  2069                           ; simple_byte            4     3 (average)
  2070                           ; direct_byte           11     8 (fixed)
  2071                           ; jumptable            260     6 (fixed)
  2072                           ;	Chosen strategy is simple_byte
  2073  0423  0871               	movf	portbMode@pin+1,w
  2074  0424  3A00               	xorlw	0	; case 0
  2075  0425  1903               	skipnz
  2076  0426  2C28               	goto	l2815
  2077  0427  2C43               	goto	l202
  2078  0428                     l2815:	
  2079                           
  2080                           ; Switch size 1, requested type "space"
  2081                           ; Number of cases is 8, Range of values is 0 to 7
  2082                           ; switch strategies available:
  2083                           ; Name         Instructions Cycles
  2084                           ; simple_byte           25    13 (average)
  2085                           ; direct_byte           32     8 (fixed)
  2086                           ; jumptable            260     6 (fixed)
  2087                           ;	Chosen strategy is simple_byte
  2088  0428  0870               	movf	portbMode@pin,w
  2089  0429  3A00               	xorlw	0	; case 0
  2090  042A  1903               	skipnz
  2091  042B  2B63               	goto	l1445
  2092  042C  3A01               	xorlw	1	; case 1
  2093  042D  1903               	skipnz
  2094  042E  2B7B               	goto	l1453
  2095  042F  3A03               	xorlw	3	; case 2
  2096  0430  1903               	skipnz
  2097  0431  2B93               	goto	l1461
  2098  0432  3A01               	xorlw	1	; case 3
  2099  0433  1903               	skipnz
  2100  0434  2BAB               	goto	l1469
  2101  0435  3A07               	xorlw	7	; case 4
  2102  0436  1903               	skipnz
  2103  0437  2BC3               	goto	l1477
  2104  0438  3A01               	xorlw	1	; case 5
  2105  0439  1903               	skipnz
  2106  043A  2BDB               	goto	l1485
  2107  043B  3A03               	xorlw	3	; case 6
  2108  043C  1903               	skipnz
  2109  043D  2BF3               	goto	l1493
  2110  043E  3A01               	xorlw	1	; case 7
  2111  043F  1903               	skipnz
  2112  0440  2C0B               	goto	l1501
  2113  0441  2C43               	goto	l202
  2114  0442  0008               	return
  2115  0443                     l202:	
  2116  0443  0008               	return
  2117  0444                     __end_of_portbMode:	
  2118                           
  2119                           	psect	text7
  2120  054C                     __ptext7:	
  2121 ;; *************** function _digitalWrite *****************
  2122 ;; Defined at:
  2123 ;;		line 993 in file "Tonche_16F877.h"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  pin             2    0[COMMON] int 
  2126 ;;  port            1    2[COMMON] unsigned char 
  2127 ;;  value           1    3[COMMON] unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;		None               void
  2132 ;; Registers used:
  2133 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2139 ;;      Params:         4       0       0       0       0
  2140 ;;      Locals:         0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0
  2142 ;;      Totals:         4       0       0       0       0
  2143 ;;Total ram usage:        4 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_setup
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           
  2153                           ;psect for function _digitalWrite
  2154  054C                     _digitalWrite:	
  2155                           
  2156                           ;Tonche_16F877.h: 995: switch(port)
  2157                           
  2158                           ;incstack = 0
  2159                           ; Regs used in _digitalWrite: [wreg-fsr0h+status,2+status,0]
  2160  054C  2FE8               	goto	l1887
  2161  054D                     l1601:	
  2162                           ;Tonche_16F877.h: 999: {
  2163                           ;Tonche_16F877.h: 1000: case 0:
  2164                           
  2165                           ;Tonche_16F877.h: 998: switch(pin)
  2166                           
  2167                           ;Tonche_16F877.h: 996: {
  2168                           ;Tonche_16F877.h: 997: case 'A':
  2169                           
  2170                           
  2171                           ;Tonche_16F877.h: 1001: if(value == 'h')
  2172  054D  0873               	movf	digitalWrite@value,w
  2173  054E  3A68               	xorlw	104
  2174  054F  1D03               	skipz
  2175  0550  2D55               	goto	l1605
  2176                           
  2177                           ;Tonche_16F877.h: 1002: {
  2178                           ;Tonche_16F877.h: 1003: PORTAbits.RA0 = 1;
  2179  0551  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0552  1303               	bcf	3,6	;RP1=0, select bank0
  2181  0553  1405               	bsf	5,0	;volatile
  2182                           
  2183                           ;Tonche_16F877.h: 1004: }
  2184  0554  0008               	return
  2185  0555                     l1605:	
  2186                           
  2187                           ;Tonche_16F877.h: 1005: else if(value == 'l')
  2188  0555  0873               	movf	digitalWrite@value,w
  2189  0556  3A6C               	xorlw	108
  2190  0557  1D03               	skipz
  2191  0558  0008               	return
  2192                           
  2193                           ;Tonche_16F877.h: 1006: {
  2194                           ;Tonche_16F877.h: 1007: PORTAbits.RA0 = 0;
  2195  0559  1283               	bcf	3,5	;RP0=0, select bank0
  2196  055A  1303               	bcf	3,6	;RP1=0, select bank0
  2197  055B  1005               	bcf	5,0	;volatile
  2198                           
  2199                           ;Tonche_16F877.h: 1008: }
  2200                           ;Tonche_16F877.h: 1009: break;
  2201  055C  0008               	return
  2202  055D                     l1609:	
  2203                           ;Tonche_16F877.h: 1010: case 1:
  2204                           
  2205                           
  2206                           ;Tonche_16F877.h: 1011: if(value == 'h')
  2207  055D  0873               	movf	digitalWrite@value,w
  2208  055E  3A68               	xorlw	104
  2209  055F  1D03               	skipz
  2210  0560  2D65               	goto	l1613
  2211                           
  2212                           ;Tonche_16F877.h: 1012: {
  2213                           ;Tonche_16F877.h: 1013: PORTAbits.RA1 = 1;
  2214  0561  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0562  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0563  1485               	bsf	5,1	;volatile
  2217                           
  2218                           ;Tonche_16F877.h: 1014: }
  2219  0564  0008               	return
  2220  0565                     l1613:	
  2221                           
  2222                           ;Tonche_16F877.h: 1015: else if(value == 'l')
  2223  0565  0873               	movf	digitalWrite@value,w
  2224  0566  3A6C               	xorlw	108
  2225  0567  1D03               	skipz
  2226  0568  0008               	return
  2227                           
  2228                           ;Tonche_16F877.h: 1016: {
  2229                           ;Tonche_16F877.h: 1017: PORTAbits.RA1 = 0;
  2230  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2231  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2232  056B  1085               	bcf	5,1	;volatile
  2233                           
  2234                           ;Tonche_16F877.h: 1018: }
  2235                           ;Tonche_16F877.h: 1019: break;
  2236  056C  0008               	return
  2237  056D                     l1617:	
  2238                           ;Tonche_16F877.h: 1020: case 2:
  2239                           
  2240                           
  2241                           ;Tonche_16F877.h: 1021: if(value == 'h')
  2242  056D  0873               	movf	digitalWrite@value,w
  2243  056E  3A68               	xorlw	104
  2244  056F  1D03               	skipz
  2245  0570  2D75               	goto	l1621
  2246                           
  2247                           ;Tonche_16F877.h: 1022: {
  2248                           ;Tonche_16F877.h: 1023: PORTAbits.RA2 = 1;
  2249  0571  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0572  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0573  1505               	bsf	5,2	;volatile
  2252                           
  2253                           ;Tonche_16F877.h: 1024: }
  2254  0574  0008               	return
  2255  0575                     l1621:	
  2256                           
  2257                           ;Tonche_16F877.h: 1025: else if(value == 'l')
  2258  0575  0873               	movf	digitalWrite@value,w
  2259  0576  3A6C               	xorlw	108
  2260  0577  1D03               	skipz
  2261  0578  0008               	return
  2262                           
  2263                           ;Tonche_16F877.h: 1026: {
  2264                           ;Tonche_16F877.h: 1027: PORTAbits.RA2 = 0;
  2265  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2266  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2267  057B  1105               	bcf	5,2	;volatile
  2268                           
  2269                           ;Tonche_16F877.h: 1028: }
  2270                           ;Tonche_16F877.h: 1029: break;
  2271  057C  0008               	return
  2272  057D                     l1625:	
  2273                           ;Tonche_16F877.h: 1030: case 3:
  2274                           
  2275                           
  2276                           ;Tonche_16F877.h: 1031: if(value == 'h')
  2277  057D  0873               	movf	digitalWrite@value,w
  2278  057E  3A68               	xorlw	104
  2279  057F  1D03               	skipz
  2280  0580  2D85               	goto	l1629
  2281                           
  2282                           ;Tonche_16F877.h: 1032: {
  2283                           ;Tonche_16F877.h: 1033: PORTAbits.RA3 = 1;
  2284  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0583  1585               	bsf	5,3	;volatile
  2287                           
  2288                           ;Tonche_16F877.h: 1034: }
  2289  0584  0008               	return
  2290  0585                     l1629:	
  2291                           
  2292                           ;Tonche_16F877.h: 1035: else if(value == 'l')
  2293  0585  0873               	movf	digitalWrite@value,w
  2294  0586  3A6C               	xorlw	108
  2295  0587  1D03               	skipz
  2296  0588  0008               	return
  2297                           
  2298                           ;Tonche_16F877.h: 1036: {
  2299                           ;Tonche_16F877.h: 1037: PORTAbits.RA3 = 0;
  2300  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2301  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2302  058B  1185               	bcf	5,3	;volatile
  2303                           
  2304                           ;Tonche_16F877.h: 1038: }
  2305                           ;Tonche_16F877.h: 1039: break;
  2306  058C  0008               	return
  2307  058D                     l1633:	
  2308                           ;Tonche_16F877.h: 1040: case 4:
  2309                           
  2310                           
  2311                           ;Tonche_16F877.h: 1041: if(value == 'h')
  2312  058D  0873               	movf	digitalWrite@value,w
  2313  058E  3A68               	xorlw	104
  2314  058F  1D03               	skipz
  2315  0590  2D95               	goto	l1637
  2316                           
  2317                           ;Tonche_16F877.h: 1042: {
  2318                           ;Tonche_16F877.h: 1043: PORTAbits.RA4 = 1;
  2319  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2320  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2321  0593  1605               	bsf	5,4	;volatile
  2322                           
  2323                           ;Tonche_16F877.h: 1044: }
  2324  0594  0008               	return
  2325  0595                     l1637:	
  2326                           
  2327                           ;Tonche_16F877.h: 1045: else if(value == 'l')
  2328  0595  0873               	movf	digitalWrite@value,w
  2329  0596  3A6C               	xorlw	108
  2330  0597  1D03               	skipz
  2331  0598  0008               	return
  2332                           
  2333                           ;Tonche_16F877.h: 1046: {
  2334                           ;Tonche_16F877.h: 1047: PORTAbits.RA4 = 0;
  2335  0599  1283               	bcf	3,5	;RP0=0, select bank0
  2336  059A  1303               	bcf	3,6	;RP1=0, select bank0
  2337  059B  1205               	bcf	5,4	;volatile
  2338                           
  2339                           ;Tonche_16F877.h: 1048: }
  2340                           ;Tonche_16F877.h: 1049: break;
  2341  059C  0008               	return
  2342  059D                     l1641:	
  2343                           ;Tonche_16F877.h: 1050: case 5:
  2344                           
  2345                           
  2346                           ;Tonche_16F877.h: 1051: if(value == 'h')
  2347  059D  0873               	movf	digitalWrite@value,w
  2348  059E  3A68               	xorlw	104
  2349  059F  1D03               	skipz
  2350  05A0  2DA5               	goto	l1645
  2351                           
  2352                           ;Tonche_16F877.h: 1052: {
  2353                           ;Tonche_16F877.h: 1053: PORTAbits.RA5 = 1;
  2354  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  2355  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  2356  05A3  1685               	bsf	5,5	;volatile
  2357                           
  2358                           ;Tonche_16F877.h: 1054: }
  2359  05A4  0008               	return
  2360  05A5                     l1645:	
  2361                           
  2362                           ;Tonche_16F877.h: 1055: else if(value == 'l')
  2363  05A5  0873               	movf	digitalWrite@value,w
  2364  05A6  3A6C               	xorlw	108
  2365  05A7  1D03               	skipz
  2366  05A8  0008               	return
  2367                           
  2368                           ;Tonche_16F877.h: 1056: {
  2369                           ;Tonche_16F877.h: 1057: PORTAbits.RA5 = 0;
  2370  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  2371  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  2372  05AB  1285               	bcf	5,5	;volatile
  2373                           
  2374                           ;Tonche_16F877.h: 1060: }
  2375                           
  2376                           ;Tonche_16F877.h: 1058: }
  2377                           ;Tonche_16F877.h: 1059: break;
  2378  05AC  0008               	return
  2379  05AD                     l1651:	
  2380                           
  2381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2382                           ; Switch size 1, requested type "space"
  2383                           ; Number of cases is 1, Range of values is 0 to 0
  2384                           ; switch strategies available:
  2385                           ; Name         Instructions Cycles
  2386                           ; simple_byte            4     3 (average)
  2387                           ; direct_byte           11     8 (fixed)
  2388                           ; jumptable            260     6 (fixed)
  2389                           ;	Chosen strategy is simple_byte
  2390  05AD  0871               	movf	digitalWrite@pin+1,w
  2391  05AE  3A00               	xorlw	0	; case 0
  2392  05AF  1903               	skipnz
  2393  05B0  2DB2               	goto	l2817
  2394  05B1  2FF9               	goto	l699
  2395  05B2                     l2817:	
  2396                           
  2397                           ; Switch size 1, requested type "space"
  2398                           ; Number of cases is 6, Range of values is 0 to 5
  2399                           ; switch strategies available:
  2400                           ; Name         Instructions Cycles
  2401                           ; simple_byte           19    10 (average)
  2402                           ; direct_byte           26     8 (fixed)
  2403                           ; jumptable            260     6 (fixed)
  2404                           ;	Chosen strategy is simple_byte
  2405  05B2  0870               	movf	digitalWrite@pin,w
  2406  05B3  3A00               	xorlw	0	; case 0
  2407  05B4  1903               	skipnz
  2408  05B5  2D4D               	goto	l1601
  2409  05B6  3A01               	xorlw	1	; case 1
  2410  05B7  1903               	skipnz
  2411  05B8  2D5D               	goto	l1609
  2412  05B9  3A03               	xorlw	3	; case 2
  2413  05BA  1903               	skipnz
  2414  05BB  2D6D               	goto	l1617
  2415  05BC  3A01               	xorlw	1	; case 3
  2416  05BD  1903               	skipnz
  2417  05BE  2D7D               	goto	l1625
  2418  05BF  3A07               	xorlw	7	; case 4
  2419  05C0  1903               	skipnz
  2420  05C1  2D8D               	goto	l1633
  2421  05C2  3A01               	xorlw	1	; case 5
  2422  05C3  1903               	skipnz
  2423  05C4  2D9D               	goto	l1641
  2424  05C5  2FF9               	goto	l699
  2425                           
  2426                           ;Tonche_16F877.h: 1061: break;
  2427  05C6  0008               	return
  2428  05C7                     l1653:	
  2429                           ;Tonche_16F877.h: 1064: {
  2430                           ;Tonche_16F877.h: 1065: case 0:
  2431                           
  2432                           ;Tonche_16F877.h: 1063: switch(pin)
  2433                           
  2434                           ;Tonche_16F877.h: 1062: case 'B':
  2435                           
  2436                           
  2437                           ;Tonche_16F877.h: 1066: if(value == 'h')
  2438  05C7  0873               	movf	digitalWrite@value,w
  2439  05C8  3A68               	xorlw	104
  2440  05C9  1D03               	skipz
  2441  05CA  2DCF               	goto	l1657
  2442                           
  2443                           ;Tonche_16F877.h: 1067: {
  2444                           ;Tonche_16F877.h: 1068: PORTBbits.RB0 = 1;
  2445  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2446  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  2447  05CD  1406               	bsf	6,0	;volatile
  2448                           
  2449                           ;Tonche_16F877.h: 1069: }
  2450  05CE  0008               	return
  2451  05CF                     l1657:	
  2452                           
  2453                           ;Tonche_16F877.h: 1070: else if(value == 'l')
  2454  05CF  0873               	movf	digitalWrite@value,w
  2455  05D0  3A6C               	xorlw	108
  2456  05D1  1D03               	skipz
  2457  05D2  0008               	return
  2458                           
  2459                           ;Tonche_16F877.h: 1071: {
  2460                           ;Tonche_16F877.h: 1072: PORTBbits.RB0 = 0;
  2461  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2462  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2463  05D5  1006               	bcf	6,0	;volatile
  2464                           
  2465                           ;Tonche_16F877.h: 1073: }
  2466                           ;Tonche_16F877.h: 1074: break;
  2467  05D6  0008               	return
  2468  05D7                     l1661:	
  2469                           ;Tonche_16F877.h: 1075: case 1:
  2470                           
  2471                           
  2472                           ;Tonche_16F877.h: 1076: if(value == 'h')
  2473  05D7  0873               	movf	digitalWrite@value,w
  2474  05D8  3A68               	xorlw	104
  2475  05D9  1D03               	skipz
  2476  05DA  2DDF               	goto	l1665
  2477                           
  2478                           ;Tonche_16F877.h: 1077: {
  2479                           ;Tonche_16F877.h: 1078: PORTBbits.RB1 = 1;
  2480  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2481  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  2482  05DD  1486               	bsf	6,1	;volatile
  2483                           
  2484                           ;Tonche_16F877.h: 1079: }
  2485  05DE  0008               	return
  2486  05DF                     l1665:	
  2487                           
  2488                           ;Tonche_16F877.h: 1080: else if(value == 'l')
  2489  05DF  0873               	movf	digitalWrite@value,w
  2490  05E0  3A6C               	xorlw	108
  2491  05E1  1D03               	skipz
  2492  05E2  0008               	return
  2493                           
  2494                           ;Tonche_16F877.h: 1081: {
  2495                           ;Tonche_16F877.h: 1082: PORTBbits.RB1 = 0;
  2496  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2497  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2498  05E5  1086               	bcf	6,1	;volatile
  2499                           
  2500                           ;Tonche_16F877.h: 1083: }
  2501                           ;Tonche_16F877.h: 1084: break;
  2502  05E6  0008               	return
  2503  05E7                     l1669:	
  2504                           ;Tonche_16F877.h: 1085: case 2:
  2505                           
  2506                           
  2507                           ;Tonche_16F877.h: 1086: if(value == 'h')
  2508  05E7  0873               	movf	digitalWrite@value,w
  2509  05E8  3A68               	xorlw	104
  2510  05E9  1D03               	skipz
  2511  05EA  2DEF               	goto	l1673
  2512                           
  2513                           ;Tonche_16F877.h: 1087: {
  2514                           ;Tonche_16F877.h: 1088: PORTBbits.RB2 = 1;
  2515  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2516  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2517  05ED  1506               	bsf	6,2	;volatile
  2518                           
  2519                           ;Tonche_16F877.h: 1089: }
  2520  05EE  0008               	return
  2521  05EF                     l1673:	
  2522                           
  2523                           ;Tonche_16F877.h: 1090: else if(value == 'l')
  2524  05EF  0873               	movf	digitalWrite@value,w
  2525  05F0  3A6C               	xorlw	108
  2526  05F1  1D03               	skipz
  2527  05F2  0008               	return
  2528                           
  2529                           ;Tonche_16F877.h: 1091: {
  2530                           ;Tonche_16F877.h: 1092: PORTBbits.RB2 = 0;
  2531  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2532  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2533  05F5  1106               	bcf	6,2	;volatile
  2534                           
  2535                           ;Tonche_16F877.h: 1093: }
  2536                           ;Tonche_16F877.h: 1094: break;
  2537  05F6  0008               	return
  2538  05F7                     l1677:	
  2539                           ;Tonche_16F877.h: 1095: case 3:
  2540                           
  2541                           
  2542                           ;Tonche_16F877.h: 1096: if(value == 'h')
  2543  05F7  0873               	movf	digitalWrite@value,w
  2544  05F8  3A68               	xorlw	104
  2545  05F9  1D03               	skipz
  2546  05FA  2DFF               	goto	l1681
  2547                           
  2548                           ;Tonche_16F877.h: 1097: {
  2549                           ;Tonche_16F877.h: 1098: PORTBbits.RB3 = 1;
  2550  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2551  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  2552  05FD  1586               	bsf	6,3	;volatile
  2553                           
  2554                           ;Tonche_16F877.h: 1099: }
  2555  05FE  0008               	return
  2556  05FF                     l1681:	
  2557                           
  2558                           ;Tonche_16F877.h: 1100: else if(value == 'l')
  2559  05FF  0873               	movf	digitalWrite@value,w
  2560  0600  3A6C               	xorlw	108
  2561  0601  1D03               	skipz
  2562  0602  0008               	return
  2563                           
  2564                           ;Tonche_16F877.h: 1101: {
  2565                           ;Tonche_16F877.h: 1102: PORTBbits.RB3 = 0;
  2566  0603  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0604  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0605  1186               	bcf	6,3	;volatile
  2569                           
  2570                           ;Tonche_16F877.h: 1103: }
  2571                           ;Tonche_16F877.h: 1104: break;
  2572  0606  0008               	return
  2573  0607                     l1685:	
  2574                           ;Tonche_16F877.h: 1105: case 4:
  2575                           
  2576                           
  2577                           ;Tonche_16F877.h: 1106: if(value == 'h')
  2578  0607  0873               	movf	digitalWrite@value,w
  2579  0608  3A68               	xorlw	104
  2580  0609  1D03               	skipz
  2581  060A  2E0F               	goto	l1689
  2582                           
  2583                           ;Tonche_16F877.h: 1107: {
  2584                           ;Tonche_16F877.h: 1108: PORTBbits.RB4 = 1;
  2585  060B  1283               	bcf	3,5	;RP0=0, select bank0
  2586  060C  1303               	bcf	3,6	;RP1=0, select bank0
  2587  060D  1606               	bsf	6,4	;volatile
  2588                           
  2589                           ;Tonche_16F877.h: 1109: }
  2590  060E  0008               	return
  2591  060F                     l1689:	
  2592                           
  2593                           ;Tonche_16F877.h: 1110: else if(value == 'l')
  2594  060F  0873               	movf	digitalWrite@value,w
  2595  0610  3A6C               	xorlw	108
  2596  0611  1D03               	skipz
  2597  0612  0008               	return
  2598                           
  2599                           ;Tonche_16F877.h: 1111: {
  2600                           ;Tonche_16F877.h: 1112: PORTBbits.RB4 = 0;
  2601  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0615  1206               	bcf	6,4	;volatile
  2604                           
  2605                           ;Tonche_16F877.h: 1113: }
  2606                           ;Tonche_16F877.h: 1114: break;
  2607  0616  0008               	return
  2608  0617                     l1693:	
  2609                           ;Tonche_16F877.h: 1115: case 5:
  2610                           
  2611                           
  2612                           ;Tonche_16F877.h: 1116: if(value == 'h')
  2613  0617  0873               	movf	digitalWrite@value,w
  2614  0618  3A68               	xorlw	104
  2615  0619  1D03               	skipz
  2616  061A  2E1F               	goto	l1697
  2617                           
  2618                           ;Tonche_16F877.h: 1117: {
  2619                           ;Tonche_16F877.h: 1118: PORTBbits.RB5 = 1;
  2620  061B  1283               	bcf	3,5	;RP0=0, select bank0
  2621  061C  1303               	bcf	3,6	;RP1=0, select bank0
  2622  061D  1686               	bsf	6,5	;volatile
  2623                           
  2624                           ;Tonche_16F877.h: 1119: }
  2625  061E  0008               	return
  2626  061F                     l1697:	
  2627                           
  2628                           ;Tonche_16F877.h: 1120: else if(value == 'l')
  2629  061F  0873               	movf	digitalWrite@value,w
  2630  0620  3A6C               	xorlw	108
  2631  0621  1D03               	skipz
  2632  0622  0008               	return
  2633                           
  2634                           ;Tonche_16F877.h: 1121: {
  2635                           ;Tonche_16F877.h: 1122: PORTBbits.RB5 = 0;
  2636  0623  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0624  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0625  1286               	bcf	6,5	;volatile
  2639                           
  2640                           ;Tonche_16F877.h: 1123: }
  2641                           ;Tonche_16F877.h: 1124: break;
  2642  0626  0008               	return
  2643  0627                     l1701:	
  2644                           ;Tonche_16F877.h: 1125: case 6:
  2645                           
  2646                           
  2647                           ;Tonche_16F877.h: 1126: if(value == 'h')
  2648  0627  0873               	movf	digitalWrite@value,w
  2649  0628  3A68               	xorlw	104
  2650  0629  1D03               	skipz
  2651  062A  2E2F               	goto	l1705
  2652                           
  2653                           ;Tonche_16F877.h: 1127: {
  2654                           ;Tonche_16F877.h: 1128: PORTBbits.RB6 = 1;
  2655  062B  1283               	bcf	3,5	;RP0=0, select bank0
  2656  062C  1303               	bcf	3,6	;RP1=0, select bank0
  2657  062D  1706               	bsf	6,6	;volatile
  2658                           
  2659                           ;Tonche_16F877.h: 1129: }
  2660  062E  0008               	return
  2661  062F                     l1705:	
  2662                           
  2663                           ;Tonche_16F877.h: 1130: else if(value == 'l')
  2664  062F  0873               	movf	digitalWrite@value,w
  2665  0630  3A6C               	xorlw	108
  2666  0631  1D03               	skipz
  2667  0632  0008               	return
  2668                           
  2669                           ;Tonche_16F877.h: 1131: {
  2670                           ;Tonche_16F877.h: 1132: PORTBbits.RB6 = 0;
  2671  0633  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0634  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0635  1306               	bcf	6,6	;volatile
  2674                           
  2675                           ;Tonche_16F877.h: 1133: }
  2676                           ;Tonche_16F877.h: 1134: break;
  2677  0636  0008               	return
  2678  0637                     l1709:	
  2679                           ;Tonche_16F877.h: 1135: case 7:
  2680                           
  2681                           
  2682                           ;Tonche_16F877.h: 1136: if(value == 'h')
  2683  0637  0873               	movf	digitalWrite@value,w
  2684  0638  3A68               	xorlw	104
  2685  0639  1D03               	skipz
  2686  063A  2E3F               	goto	l1713
  2687                           
  2688                           ;Tonche_16F877.h: 1137: {
  2689                           ;Tonche_16F877.h: 1138: PORTBbits.RB7 = 1;
  2690  063B  1283               	bcf	3,5	;RP0=0, select bank0
  2691  063C  1303               	bcf	3,6	;RP1=0, select bank0
  2692  063D  1786               	bsf	6,7	;volatile
  2693                           
  2694                           ;Tonche_16F877.h: 1139: }
  2695  063E  0008               	return
  2696  063F                     l1713:	
  2697                           
  2698                           ;Tonche_16F877.h: 1140: else if(value == 'l')
  2699  063F  0873               	movf	digitalWrite@value,w
  2700  0640  3A6C               	xorlw	108
  2701  0641  1D03               	skipz
  2702  0642  0008               	return
  2703                           
  2704                           ;Tonche_16F877.h: 1141: {
  2705                           ;Tonche_16F877.h: 1142: PORTBbits.RB7 = 0;
  2706  0643  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0644  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0645  1386               	bcf	6,7	;volatile
  2709                           
  2710                           ;Tonche_16F877.h: 1145: }
  2711                           
  2712                           ;Tonche_16F877.h: 1143: }
  2713                           ;Tonche_16F877.h: 1144: break;
  2714  0646  0008               	return
  2715  0647                     l1719:	
  2716                           
  2717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2718                           ; Switch size 1, requested type "space"
  2719                           ; Number of cases is 1, Range of values is 0 to 0
  2720                           ; switch strategies available:
  2721                           ; Name         Instructions Cycles
  2722                           ; simple_byte            4     3 (average)
  2723                           ; direct_byte           11     8 (fixed)
  2724                           ; jumptable            260     6 (fixed)
  2725                           ;	Chosen strategy is simple_byte
  2726  0647  0871               	movf	digitalWrite@pin+1,w
  2727  0648  3A00               	xorlw	0	; case 0
  2728  0649  1903               	skipnz
  2729  064A  2E4C               	goto	l2819
  2730  064B  2FF9               	goto	l699
  2731  064C                     l2819:	
  2732                           
  2733                           ; Switch size 1, requested type "space"
  2734                           ; Number of cases is 8, Range of values is 0 to 7
  2735                           ; switch strategies available:
  2736                           ; Name         Instructions Cycles
  2737                           ; simple_byte           25    13 (average)
  2738                           ; direct_byte           32     8 (fixed)
  2739                           ; jumptable            260     6 (fixed)
  2740                           ;	Chosen strategy is simple_byte
  2741  064C  0870               	movf	digitalWrite@pin,w
  2742  064D  3A00               	xorlw	0	; case 0
  2743  064E  1903               	skipnz
  2744  064F  2DC7               	goto	l1653
  2745  0650  3A01               	xorlw	1	; case 1
  2746  0651  1903               	skipnz
  2747  0652  2DD7               	goto	l1661
  2748  0653  3A03               	xorlw	3	; case 2
  2749  0654  1903               	skipnz
  2750  0655  2DE7               	goto	l1669
  2751  0656  3A01               	xorlw	1	; case 3
  2752  0657  1903               	skipnz
  2753  0658  2DF7               	goto	l1677
  2754  0659  3A07               	xorlw	7	; case 4
  2755  065A  1903               	skipnz
  2756  065B  2E07               	goto	l1685
  2757  065C  3A01               	xorlw	1	; case 5
  2758  065D  1903               	skipnz
  2759  065E  2E17               	goto	l1693
  2760  065F  3A03               	xorlw	3	; case 6
  2761  0660  1903               	skipnz
  2762  0661  2E27               	goto	l1701
  2763  0662  3A01               	xorlw	1	; case 7
  2764  0663  1903               	skipnz
  2765  0664  2E37               	goto	l1709
  2766  0665  2FF9               	goto	l699
  2767                           
  2768                           ;Tonche_16F877.h: 1146: break;
  2769  0666  0008               	return
  2770  0667                     l1721:	
  2771                           ;Tonche_16F877.h: 1149: {
  2772                           ;Tonche_16F877.h: 1150: case 0:
  2773                           
  2774                           ;Tonche_16F877.h: 1148: switch(pin)
  2775                           
  2776                           ;Tonche_16F877.h: 1147: case 'C':
  2777                           
  2778                           
  2779                           ;Tonche_16F877.h: 1151: if(value == 'h')
  2780  0667  0873               	movf	digitalWrite@value,w
  2781  0668  3A68               	xorlw	104
  2782  0669  1D03               	skipz
  2783  066A  2E6F               	goto	l1725
  2784                           
  2785                           ;Tonche_16F877.h: 1152: {
  2786                           ;Tonche_16F877.h: 1153: PORTCbits.RC0 = 1;
  2787  066B  1283               	bcf	3,5	;RP0=0, select bank0
  2788  066C  1303               	bcf	3,6	;RP1=0, select bank0
  2789  066D  1407               	bsf	7,0	;volatile
  2790                           
  2791                           ;Tonche_16F877.h: 1154: }
  2792  066E  0008               	return
  2793  066F                     l1725:	
  2794                           
  2795                           ;Tonche_16F877.h: 1155: else if(value == 'l')
  2796  066F  0873               	movf	digitalWrite@value,w
  2797  0670  3A6C               	xorlw	108
  2798  0671  1D03               	skipz
  2799  0672  0008               	return
  2800                           
  2801                           ;Tonche_16F877.h: 1156: {
  2802                           ;Tonche_16F877.h: 1157: PORTCbits.RC0 = 0;
  2803  0673  1283               	bcf	3,5	;RP0=0, select bank0
  2804  0674  1303               	bcf	3,6	;RP1=0, select bank0
  2805  0675  1007               	bcf	7,0	;volatile
  2806                           
  2807                           ;Tonche_16F877.h: 1158: }
  2808                           ;Tonche_16F877.h: 1159: break;
  2809  0676  0008               	return
  2810  0677                     l1729:	
  2811                           ;Tonche_16F877.h: 1160: case 1:
  2812                           
  2813                           
  2814                           ;Tonche_16F877.h: 1161: if(value == 'h')
  2815  0677  0873               	movf	digitalWrite@value,w
  2816  0678  3A68               	xorlw	104
  2817  0679  1D03               	skipz
  2818  067A  2E7F               	goto	l1733
  2819                           
  2820                           ;Tonche_16F877.h: 1162: {
  2821                           ;Tonche_16F877.h: 1163: PORTCbits.RC1 = 1;
  2822  067B  1283               	bcf	3,5	;RP0=0, select bank0
  2823  067C  1303               	bcf	3,6	;RP1=0, select bank0
  2824  067D  1487               	bsf	7,1	;volatile
  2825                           
  2826                           ;Tonche_16F877.h: 1164: }
  2827  067E  0008               	return
  2828  067F                     l1733:	
  2829                           
  2830                           ;Tonche_16F877.h: 1165: else if(value == 'l')
  2831  067F  0873               	movf	digitalWrite@value,w
  2832  0680  3A6C               	xorlw	108
  2833  0681  1D03               	skipz
  2834  0682  0008               	return
  2835                           
  2836                           ;Tonche_16F877.h: 1166: {
  2837                           ;Tonche_16F877.h: 1167: PORTCbits.RC1 = 0;
  2838  0683  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0684  1303               	bcf	3,6	;RP1=0, select bank0
  2840  0685  1087               	bcf	7,1	;volatile
  2841                           
  2842                           ;Tonche_16F877.h: 1168: }
  2843                           ;Tonche_16F877.h: 1169: break;
  2844  0686  0008               	return
  2845  0687                     l1737:	
  2846                           ;Tonche_16F877.h: 1170: case 2:
  2847                           
  2848                           
  2849                           ;Tonche_16F877.h: 1171: if(value == 'h')
  2850  0687  0873               	movf	digitalWrite@value,w
  2851  0688  3A68               	xorlw	104
  2852  0689  1D03               	skipz
  2853  068A  2E8F               	goto	l1741
  2854                           
  2855                           ;Tonche_16F877.h: 1172: {
  2856                           ;Tonche_16F877.h: 1173: PORTCbits.RC2 = 1;
  2857  068B  1283               	bcf	3,5	;RP0=0, select bank0
  2858  068C  1303               	bcf	3,6	;RP1=0, select bank0
  2859  068D  1507               	bsf	7,2	;volatile
  2860                           
  2861                           ;Tonche_16F877.h: 1174: }
  2862  068E  0008               	return
  2863  068F                     l1741:	
  2864                           
  2865                           ;Tonche_16F877.h: 1175: else if(value == 'l')
  2866  068F  0873               	movf	digitalWrite@value,w
  2867  0690  3A6C               	xorlw	108
  2868  0691  1D03               	skipz
  2869  0692  0008               	return
  2870                           
  2871                           ;Tonche_16F877.h: 1176: {
  2872                           ;Tonche_16F877.h: 1177: PORTCbits.RC2 = 0;
  2873  0693  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0694  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0695  1107               	bcf	7,2	;volatile
  2876                           
  2877                           ;Tonche_16F877.h: 1178: }
  2878                           ;Tonche_16F877.h: 1179: break;
  2879  0696  0008               	return
  2880  0697                     l1745:	
  2881                           ;Tonche_16F877.h: 1180: case 3:
  2882                           
  2883                           
  2884                           ;Tonche_16F877.h: 1181: if(value == 'h')
  2885  0697  0873               	movf	digitalWrite@value,w
  2886  0698  3A68               	xorlw	104
  2887  0699  1D03               	skipz
  2888  069A  2E9F               	goto	l1749
  2889                           
  2890                           ;Tonche_16F877.h: 1182: {
  2891                           ;Tonche_16F877.h: 1183: PORTCbits.RC3 = 1;
  2892  069B  1283               	bcf	3,5	;RP0=0, select bank0
  2893  069C  1303               	bcf	3,6	;RP1=0, select bank0
  2894  069D  1587               	bsf	7,3	;volatile
  2895                           
  2896                           ;Tonche_16F877.h: 1184: }
  2897  069E  0008               	return
  2898  069F                     l1749:	
  2899                           
  2900                           ;Tonche_16F877.h: 1185: else if(value == 'l')
  2901  069F  0873               	movf	digitalWrite@value,w
  2902  06A0  3A6C               	xorlw	108
  2903  06A1  1D03               	skipz
  2904  06A2  0008               	return
  2905                           
  2906                           ;Tonche_16F877.h: 1186: {
  2907                           ;Tonche_16F877.h: 1187: PORTCbits.RC3 = 0;
  2908  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  2909  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  2910  06A5  1187               	bcf	7,3	;volatile
  2911                           
  2912                           ;Tonche_16F877.h: 1188: }
  2913                           ;Tonche_16F877.h: 1189: break;
  2914  06A6  0008               	return
  2915  06A7                     l1753:	
  2916                           ;Tonche_16F877.h: 1190: case 4:
  2917                           
  2918                           
  2919                           ;Tonche_16F877.h: 1191: if(value == 'h')
  2920  06A7  0873               	movf	digitalWrite@value,w
  2921  06A8  3A68               	xorlw	104
  2922  06A9  1D03               	skipz
  2923  06AA  2EAF               	goto	l1757
  2924                           
  2925                           ;Tonche_16F877.h: 1192: {
  2926                           ;Tonche_16F877.h: 1193: PORTCbits.RC4 = 1;
  2927  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  2928  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  2929  06AD  1607               	bsf	7,4	;volatile
  2930                           
  2931                           ;Tonche_16F877.h: 1194: }
  2932  06AE  0008               	return
  2933  06AF                     l1757:	
  2934                           
  2935                           ;Tonche_16F877.h: 1195: else if(value == 'l')
  2936  06AF  0873               	movf	digitalWrite@value,w
  2937  06B0  3A6C               	xorlw	108
  2938  06B1  1D03               	skipz
  2939  06B2  0008               	return
  2940                           
  2941                           ;Tonche_16F877.h: 1196: {
  2942                           ;Tonche_16F877.h: 1197: PORTCbits.RC4 = 0;
  2943  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2944  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  2945  06B5  1207               	bcf	7,4	;volatile
  2946                           
  2947                           ;Tonche_16F877.h: 1198: }
  2948                           ;Tonche_16F877.h: 1199: break;
  2949  06B6  0008               	return
  2950  06B7                     l1761:	
  2951                           ;Tonche_16F877.h: 1200: case 5:
  2952                           
  2953                           
  2954                           ;Tonche_16F877.h: 1201: if(value == 'h')
  2955  06B7  0873               	movf	digitalWrite@value,w
  2956  06B8  3A68               	xorlw	104
  2957  06B9  1D03               	skipz
  2958  06BA  2EBF               	goto	l1765
  2959                           
  2960                           ;Tonche_16F877.h: 1202: {
  2961                           ;Tonche_16F877.h: 1203: PORTCbits.RC5 = 1;
  2962  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  2963  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  2964  06BD  1687               	bsf	7,5	;volatile
  2965                           
  2966                           ;Tonche_16F877.h: 1204: }
  2967  06BE  0008               	return
  2968  06BF                     l1765:	
  2969                           
  2970                           ;Tonche_16F877.h: 1205: else if(value == 'l')
  2971  06BF  0873               	movf	digitalWrite@value,w
  2972  06C0  3A6C               	xorlw	108
  2973  06C1  1D03               	skipz
  2974  06C2  0008               	return
  2975                           
  2976                           ;Tonche_16F877.h: 1206: {
  2977                           ;Tonche_16F877.h: 1207: PORTCbits.RC5 = 0;
  2978  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  2979  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  2980  06C5  1287               	bcf	7,5	;volatile
  2981                           
  2982                           ;Tonche_16F877.h: 1208: }
  2983                           ;Tonche_16F877.h: 1209: break;
  2984  06C6  0008               	return
  2985  06C7                     l1769:	
  2986                           ;Tonche_16F877.h: 1210: case 6:
  2987                           
  2988                           
  2989                           ;Tonche_16F877.h: 1211: if(value == 'h')
  2990  06C7  0873               	movf	digitalWrite@value,w
  2991  06C8  3A68               	xorlw	104
  2992  06C9  1D03               	skipz
  2993  06CA  2ECF               	goto	l1773
  2994                           
  2995                           ;Tonche_16F877.h: 1212: {
  2996                           ;Tonche_16F877.h: 1213: PORTCbits.RC6 = 1;
  2997  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2998  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2999  06CD  1707               	bsf	7,6	;volatile
  3000                           
  3001                           ;Tonche_16F877.h: 1214: }
  3002  06CE  0008               	return
  3003  06CF                     l1773:	
  3004                           
  3005                           ;Tonche_16F877.h: 1215: else if(value == 'l')
  3006  06CF  0873               	movf	digitalWrite@value,w
  3007  06D0  3A6C               	xorlw	108
  3008  06D1  1D03               	skipz
  3009  06D2  0008               	return
  3010                           
  3011                           ;Tonche_16F877.h: 1216: {
  3012                           ;Tonche_16F877.h: 1217: PORTCbits.RC6 = 0;
  3013  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  3014  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  3015  06D5  1307               	bcf	7,6	;volatile
  3016                           
  3017                           ;Tonche_16F877.h: 1218: }
  3018                           ;Tonche_16F877.h: 1219: break;
  3019  06D6  0008               	return
  3020  06D7                     l1777:	
  3021                           ;Tonche_16F877.h: 1220: case 7:
  3022                           
  3023                           
  3024                           ;Tonche_16F877.h: 1221: if(value == 'h')
  3025  06D7  0873               	movf	digitalWrite@value,w
  3026  06D8  3A68               	xorlw	104
  3027  06D9  1D03               	skipz
  3028  06DA  2EDF               	goto	l1781
  3029                           
  3030                           ;Tonche_16F877.h: 1222: {
  3031                           ;Tonche_16F877.h: 1223: PORTCbits.RC7 = 1;
  3032  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  3033  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  3034  06DD  1787               	bsf	7,7	;volatile
  3035                           
  3036                           ;Tonche_16F877.h: 1224: }
  3037  06DE  0008               	return
  3038  06DF                     l1781:	
  3039                           
  3040                           ;Tonche_16F877.h: 1225: else if(value == 'l')
  3041  06DF  0873               	movf	digitalWrite@value,w
  3042  06E0  3A6C               	xorlw	108
  3043  06E1  1D03               	skipz
  3044  06E2  0008               	return
  3045                           
  3046                           ;Tonche_16F877.h: 1226: {
  3047                           ;Tonche_16F877.h: 1227: PORTCbits.RC7 = 0;
  3048  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  3049  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  3050  06E5  1387               	bcf	7,7	;volatile
  3051                           
  3052                           ;Tonche_16F877.h: 1230: }
  3053                           
  3054                           ;Tonche_16F877.h: 1228: }
  3055                           ;Tonche_16F877.h: 1229: break;
  3056  06E6  0008               	return
  3057  06E7                     l1787:	
  3058                           
  3059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3060                           ; Switch size 1, requested type "space"
  3061                           ; Number of cases is 1, Range of values is 0 to 0
  3062                           ; switch strategies available:
  3063                           ; Name         Instructions Cycles
  3064                           ; simple_byte            4     3 (average)
  3065                           ; direct_byte           11     8 (fixed)
  3066                           ; jumptable            260     6 (fixed)
  3067                           ;	Chosen strategy is simple_byte
  3068  06E7  0871               	movf	digitalWrite@pin+1,w
  3069  06E8  3A00               	xorlw	0	; case 0
  3070  06E9  1903               	skipnz
  3071  06EA  2EEC               	goto	l2821
  3072  06EB  2FF9               	goto	l699
  3073  06EC                     l2821:	
  3074                           
  3075                           ; Switch size 1, requested type "space"
  3076                           ; Number of cases is 8, Range of values is 0 to 7
  3077                           ; switch strategies available:
  3078                           ; Name         Instructions Cycles
  3079                           ; simple_byte           25    13 (average)
  3080                           ; direct_byte           32     8 (fixed)
  3081                           ; jumptable            260     6 (fixed)
  3082                           ;	Chosen strategy is simple_byte
  3083  06EC  0870               	movf	digitalWrite@pin,w
  3084  06ED  3A00               	xorlw	0	; case 0
  3085  06EE  1903               	skipnz
  3086  06EF  2E67               	goto	l1721
  3087  06F0  3A01               	xorlw	1	; case 1
  3088  06F1  1903               	skipnz
  3089  06F2  2E77               	goto	l1729
  3090  06F3  3A03               	xorlw	3	; case 2
  3091  06F4  1903               	skipnz
  3092  06F5  2E87               	goto	l1737
  3093  06F6  3A01               	xorlw	1	; case 3
  3094  06F7  1903               	skipnz
  3095  06F8  2E97               	goto	l1745
  3096  06F9  3A07               	xorlw	7	; case 4
  3097  06FA  1903               	skipnz
  3098  06FB  2EA7               	goto	l1753
  3099  06FC  3A01               	xorlw	1	; case 5
  3100  06FD  1903               	skipnz
  3101  06FE  2EB7               	goto	l1761
  3102  06FF  3A03               	xorlw	3	; case 6
  3103  0700  1903               	skipnz
  3104  0701  2EC7               	goto	l1769
  3105  0702  3A01               	xorlw	1	; case 7
  3106  0703  1903               	skipnz
  3107  0704  2ED7               	goto	l1777
  3108  0705  2FF9               	goto	l699
  3109                           
  3110                           ;Tonche_16F877.h: 1231: break;
  3111  0706  0008               	return
  3112  0707                     l1789:	
  3113                           ;Tonche_16F877.h: 1234: {
  3114                           ;Tonche_16F877.h: 1235: case 0:
  3115                           
  3116                           ;Tonche_16F877.h: 1233: switch(pin)
  3117                           
  3118                           ;Tonche_16F877.h: 1232: case 'D':
  3119                           
  3120                           
  3121                           ;Tonche_16F877.h: 1236: if(value == 'h')
  3122  0707  0873               	movf	digitalWrite@value,w
  3123  0708  3A68               	xorlw	104
  3124  0709  1D03               	skipz
  3125  070A  2F0F               	goto	l1793
  3126                           
  3127                           ;Tonche_16F877.h: 1237: {
  3128                           ;Tonche_16F877.h: 1238: PORTDbits.RD0 = 1;
  3129  070B  1283               	bcf	3,5	;RP0=0, select bank0
  3130  070C  1303               	bcf	3,6	;RP1=0, select bank0
  3131  070D  1408               	bsf	8,0	;volatile
  3132                           
  3133                           ;Tonche_16F877.h: 1239: }
  3134  070E  0008               	return
  3135  070F                     l1793:	
  3136                           
  3137                           ;Tonche_16F877.h: 1240: else if(value == 'l')
  3138  070F  0873               	movf	digitalWrite@value,w
  3139  0710  3A6C               	xorlw	108
  3140  0711  1D03               	skipz
  3141  0712  0008               	return
  3142                           
  3143                           ;Tonche_16F877.h: 1241: {
  3144                           ;Tonche_16F877.h: 1242: PORTDbits.RD0 = 0;
  3145  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0715  1008               	bcf	8,0	;volatile
  3148                           
  3149                           ;Tonche_16F877.h: 1243: }
  3150                           ;Tonche_16F877.h: 1244: break;
  3151  0716  0008               	return
  3152  0717                     l1797:	
  3153                           ;Tonche_16F877.h: 1245: case 1:
  3154                           
  3155                           
  3156                           ;Tonche_16F877.h: 1246: if(value == 'h')
  3157  0717  0873               	movf	digitalWrite@value,w
  3158  0718  3A68               	xorlw	104
  3159  0719  1D03               	skipz
  3160  071A  2F1F               	goto	l1801
  3161                           
  3162                           ;Tonche_16F877.h: 1247: {
  3163                           ;Tonche_16F877.h: 1248: PORTDbits.RD1 = 1;
  3164  071B  1283               	bcf	3,5	;RP0=0, select bank0
  3165  071C  1303               	bcf	3,6	;RP1=0, select bank0
  3166  071D  1488               	bsf	8,1	;volatile
  3167                           
  3168                           ;Tonche_16F877.h: 1249: }
  3169  071E  0008               	return
  3170  071F                     l1801:	
  3171                           
  3172                           ;Tonche_16F877.h: 1250: else if(value == 'l')
  3173  071F  0873               	movf	digitalWrite@value,w
  3174  0720  3A6C               	xorlw	108
  3175  0721  1D03               	skipz
  3176  0722  0008               	return
  3177                           
  3178                           ;Tonche_16F877.h: 1251: {
  3179                           ;Tonche_16F877.h: 1252: PORTDbits.RD1 = 0;
  3180  0723  1283               	bcf	3,5	;RP0=0, select bank0
  3181  0724  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0725  1088               	bcf	8,1	;volatile
  3183                           
  3184                           ;Tonche_16F877.h: 1253: }
  3185                           ;Tonche_16F877.h: 1254: break;
  3186  0726  0008               	return
  3187  0727                     l1805:	
  3188                           ;Tonche_16F877.h: 1255: case 2:
  3189                           
  3190                           
  3191                           ;Tonche_16F877.h: 1256: if(value == 'h')
  3192  0727  0873               	movf	digitalWrite@value,w
  3193  0728  3A68               	xorlw	104
  3194  0729  1D03               	skipz
  3195  072A  2F2F               	goto	l1809
  3196                           
  3197                           ;Tonche_16F877.h: 1257: {
  3198                           ;Tonche_16F877.h: 1258: PORTDbits.RD2 = 1;
  3199  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3200  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3201  072D  1508               	bsf	8,2	;volatile
  3202                           
  3203                           ;Tonche_16F877.h: 1259: }
  3204  072E  0008               	return
  3205  072F                     l1809:	
  3206                           
  3207                           ;Tonche_16F877.h: 1260: else if(value == 'l')
  3208  072F  0873               	movf	digitalWrite@value,w
  3209  0730  3A6C               	xorlw	108
  3210  0731  1D03               	skipz
  3211  0732  0008               	return
  3212                           
  3213                           ;Tonche_16F877.h: 1261: {
  3214                           ;Tonche_16F877.h: 1262: PORTDbits.RD2 = 0;
  3215  0733  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0734  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0735  1108               	bcf	8,2	;volatile
  3218                           
  3219                           ;Tonche_16F877.h: 1263: }
  3220                           ;Tonche_16F877.h: 1264: break;
  3221  0736  0008               	return
  3222  0737                     l1813:	
  3223                           ;Tonche_16F877.h: 1265: case 3:
  3224                           
  3225                           
  3226                           ;Tonche_16F877.h: 1266: if(value == 'h')
  3227  0737  0873               	movf	digitalWrite@value,w
  3228  0738  3A68               	xorlw	104
  3229  0739  1D03               	skipz
  3230  073A  2F3F               	goto	l1817
  3231                           
  3232                           ;Tonche_16F877.h: 1267: {
  3233                           ;Tonche_16F877.h: 1268: PORTDbits.RD3 = 1;
  3234  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3235  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3236  073D  1588               	bsf	8,3	;volatile
  3237                           
  3238                           ;Tonche_16F877.h: 1269: }
  3239  073E  0008               	return
  3240  073F                     l1817:	
  3241                           
  3242                           ;Tonche_16F877.h: 1270: else if(value == 'l')
  3243  073F  0873               	movf	digitalWrite@value,w
  3244  0740  3A6C               	xorlw	108
  3245  0741  1D03               	skipz
  3246  0742  0008               	return
  3247                           
  3248                           ;Tonche_16F877.h: 1271: {
  3249                           ;Tonche_16F877.h: 1272: PORTDbits.RD3 = 0;
  3250  0743  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0744  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0745  1188               	bcf	8,3	;volatile
  3253                           
  3254                           ;Tonche_16F877.h: 1273: }
  3255                           ;Tonche_16F877.h: 1274: break;
  3256  0746  0008               	return
  3257  0747                     l1821:	
  3258                           ;Tonche_16F877.h: 1275: case 4:
  3259                           
  3260                           
  3261                           ;Tonche_16F877.h: 1276: if(value == 'h')
  3262  0747  0873               	movf	digitalWrite@value,w
  3263  0748  3A68               	xorlw	104
  3264  0749  1D03               	skipz
  3265  074A  2F4F               	goto	l1825
  3266                           
  3267                           ;Tonche_16F877.h: 1277: {
  3268                           ;Tonche_16F877.h: 1278: PORTDbits.RD4 = 1;
  3269  074B  1283               	bcf	3,5	;RP0=0, select bank0
  3270  074C  1303               	bcf	3,6	;RP1=0, select bank0
  3271  074D  1608               	bsf	8,4	;volatile
  3272                           
  3273                           ;Tonche_16F877.h: 1279: }
  3274  074E  0008               	return
  3275  074F                     l1825:	
  3276                           
  3277                           ;Tonche_16F877.h: 1280: else if(value == 'l')
  3278  074F  0873               	movf	digitalWrite@value,w
  3279  0750  3A6C               	xorlw	108
  3280  0751  1D03               	skipz
  3281  0752  0008               	return
  3282                           
  3283                           ;Tonche_16F877.h: 1281: {
  3284                           ;Tonche_16F877.h: 1282: PORTDbits.RD4 = 0;
  3285  0753  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0754  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0755  1208               	bcf	8,4	;volatile
  3288                           
  3289                           ;Tonche_16F877.h: 1283: }
  3290                           ;Tonche_16F877.h: 1284: break;
  3291  0756  0008               	return
  3292  0757                     l1829:	
  3293                           ;Tonche_16F877.h: 1285: case 5:
  3294                           
  3295                           
  3296                           ;Tonche_16F877.h: 1286: if(value == 'h')
  3297  0757  0873               	movf	digitalWrite@value,w
  3298  0758  3A68               	xorlw	104
  3299  0759  1D03               	skipz
  3300  075A  2F5F               	goto	l1833
  3301                           
  3302                           ;Tonche_16F877.h: 1287: {
  3303                           ;Tonche_16F877.h: 1288: PORTDbits.RD5 = 1;
  3304  075B  1283               	bcf	3,5	;RP0=0, select bank0
  3305  075C  1303               	bcf	3,6	;RP1=0, select bank0
  3306  075D  1688               	bsf	8,5	;volatile
  3307                           
  3308                           ;Tonche_16F877.h: 1289: }
  3309  075E  0008               	return
  3310  075F                     l1833:	
  3311                           
  3312                           ;Tonche_16F877.h: 1290: else if(value == 'l')
  3313  075F  0873               	movf	digitalWrite@value,w
  3314  0760  3A6C               	xorlw	108
  3315  0761  1D03               	skipz
  3316  0762  0008               	return
  3317                           
  3318                           ;Tonche_16F877.h: 1291: {
  3319                           ;Tonche_16F877.h: 1292: PORTDbits.RD5 = 0;
  3320  0763  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0764  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0765  1288               	bcf	8,5	;volatile
  3323                           
  3324                           ;Tonche_16F877.h: 1293: }
  3325                           ;Tonche_16F877.h: 1294: break;
  3326  0766  0008               	return
  3327  0767                     l1837:	
  3328                           ;Tonche_16F877.h: 1295: case 6:
  3329                           
  3330                           
  3331                           ;Tonche_16F877.h: 1296: if(value == 'h')
  3332  0767  0873               	movf	digitalWrite@value,w
  3333  0768  3A68               	xorlw	104
  3334  0769  1D03               	skipz
  3335  076A  2F6F               	goto	l1841
  3336                           
  3337                           ;Tonche_16F877.h: 1297: {
  3338                           ;Tonche_16F877.h: 1298: PORTDbits.RD6 = 1;
  3339  076B  1283               	bcf	3,5	;RP0=0, select bank0
  3340  076C  1303               	bcf	3,6	;RP1=0, select bank0
  3341  076D  1708               	bsf	8,6	;volatile
  3342                           
  3343                           ;Tonche_16F877.h: 1299: }
  3344  076E  0008               	return
  3345  076F                     l1841:	
  3346                           
  3347                           ;Tonche_16F877.h: 1300: else if(value == 'l')
  3348  076F  0873               	movf	digitalWrite@value,w
  3349  0770  3A6C               	xorlw	108
  3350  0771  1D03               	skipz
  3351  0772  0008               	return
  3352                           
  3353                           ;Tonche_16F877.h: 1301: {
  3354                           ;Tonche_16F877.h: 1302: PORTDbits.RD6 = 0;
  3355  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0775  1308               	bcf	8,6	;volatile
  3358                           
  3359                           ;Tonche_16F877.h: 1303: }
  3360                           ;Tonche_16F877.h: 1304: break;
  3361  0776  0008               	return
  3362  0777                     l1845:	
  3363                           ;Tonche_16F877.h: 1305: case 7:
  3364                           
  3365                           
  3366                           ;Tonche_16F877.h: 1306: if(value == 'h')
  3367  0777  0873               	movf	digitalWrite@value,w
  3368  0778  3A68               	xorlw	104
  3369  0779  1D03               	skipz
  3370  077A  2F7F               	goto	l1849
  3371                           
  3372                           ;Tonche_16F877.h: 1307: {
  3373                           ;Tonche_16F877.h: 1308: PORTDbits.RD7 = 1;
  3374  077B  1283               	bcf	3,5	;RP0=0, select bank0
  3375  077C  1303               	bcf	3,6	;RP1=0, select bank0
  3376  077D  1788               	bsf	8,7	;volatile
  3377                           
  3378                           ;Tonche_16F877.h: 1309: }
  3379  077E  0008               	return
  3380  077F                     l1849:	
  3381                           
  3382                           ;Tonche_16F877.h: 1310: else if(value == 'l')
  3383  077F  0873               	movf	digitalWrite@value,w
  3384  0780  3A6C               	xorlw	108
  3385  0781  1D03               	skipz
  3386  0782  0008               	return
  3387                           
  3388                           ;Tonche_16F877.h: 1311: {
  3389                           ;Tonche_16F877.h: 1312: PORTDbits.RD7 = 0;
  3390  0783  1283               	bcf	3,5	;RP0=0, select bank0
  3391  0784  1303               	bcf	3,6	;RP1=0, select bank0
  3392  0785  1388               	bcf	8,7	;volatile
  3393                           
  3394                           ;Tonche_16F877.h: 1315: }
  3395                           
  3396                           ;Tonche_16F877.h: 1313: }
  3397                           ;Tonche_16F877.h: 1314: break;
  3398  0786  0008               	return
  3399  0787                     l1855:	
  3400                           
  3401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3402                           ; Switch size 1, requested type "space"
  3403                           ; Number of cases is 1, Range of values is 0 to 0
  3404                           ; switch strategies available:
  3405                           ; Name         Instructions Cycles
  3406                           ; simple_byte            4     3 (average)
  3407                           ; direct_byte           11     8 (fixed)
  3408                           ; jumptable            260     6 (fixed)
  3409                           ;	Chosen strategy is simple_byte
  3410  0787  0871               	movf	digitalWrite@pin+1,w
  3411  0788  3A00               	xorlw	0	; case 0
  3412  0789  1903               	skipnz
  3413  078A  2F8C               	goto	l2823
  3414  078B  2FF9               	goto	l699
  3415  078C                     l2823:	
  3416                           
  3417                           ; Switch size 1, requested type "space"
  3418                           ; Number of cases is 8, Range of values is 0 to 7
  3419                           ; switch strategies available:
  3420                           ; Name         Instructions Cycles
  3421                           ; simple_byte           25    13 (average)
  3422                           ; direct_byte           32     8 (fixed)
  3423                           ; jumptable            260     6 (fixed)
  3424                           ;	Chosen strategy is simple_byte
  3425  078C  0870               	movf	digitalWrite@pin,w
  3426  078D  3A00               	xorlw	0	; case 0
  3427  078E  1903               	skipnz
  3428  078F  2F07               	goto	l1789
  3429  0790  3A01               	xorlw	1	; case 1
  3430  0791  1903               	skipnz
  3431  0792  2F17               	goto	l1797
  3432  0793  3A03               	xorlw	3	; case 2
  3433  0794  1903               	skipnz
  3434  0795  2F27               	goto	l1805
  3435  0796  3A01               	xorlw	1	; case 3
  3436  0797  1903               	skipnz
  3437  0798  2F37               	goto	l1813
  3438  0799  3A07               	xorlw	7	; case 4
  3439  079A  1903               	skipnz
  3440  079B  2F47               	goto	l1821
  3441  079C  3A01               	xorlw	1	; case 5
  3442  079D  1903               	skipnz
  3443  079E  2F57               	goto	l1829
  3444  079F  3A03               	xorlw	3	; case 6
  3445  07A0  1903               	skipnz
  3446  07A1  2F67               	goto	l1837
  3447  07A2  3A01               	xorlw	1	; case 7
  3448  07A3  1903               	skipnz
  3449  07A4  2F77               	goto	l1845
  3450  07A5  2FF9               	goto	l699
  3451                           
  3452                           ;Tonche_16F877.h: 1316: break;
  3453  07A6  0008               	return
  3454  07A7                     l1857:	
  3455                           ;Tonche_16F877.h: 1319: {
  3456                           ;Tonche_16F877.h: 1320: case 0:
  3457                           
  3458                           ;Tonche_16F877.h: 1318: switch(pin)
  3459                           
  3460                           ;Tonche_16F877.h: 1317: case 'E':
  3461                           
  3462                           
  3463                           ;Tonche_16F877.h: 1321: if(value == 'h')
  3464  07A7  0873               	movf	digitalWrite@value,w
  3465  07A8  3A68               	xorlw	104
  3466  07A9  1D03               	skipz
  3467  07AA  2FAF               	goto	l1861
  3468                           
  3469                           ;Tonche_16F877.h: 1322: {
  3470                           ;Tonche_16F877.h: 1323: PORTEbits.RE0 = 1;
  3471  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  3472  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  3473  07AD  1409               	bsf	9,0	;volatile
  3474                           
  3475                           ;Tonche_16F877.h: 1324: }
  3476  07AE  0008               	return
  3477  07AF                     l1861:	
  3478                           
  3479                           ;Tonche_16F877.h: 1325: else if(value == 'l')
  3480  07AF  0873               	movf	digitalWrite@value,w
  3481  07B0  3A6C               	xorlw	108
  3482  07B1  1D03               	skipz
  3483  07B2  0008               	return
  3484                           
  3485                           ;Tonche_16F877.h: 1326: {
  3486                           ;Tonche_16F877.h: 1327: PORTEbits.RE0 = 0;
  3487  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  3488  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  3489  07B5  1009               	bcf	9,0	;volatile
  3490                           
  3491                           ;Tonche_16F877.h: 1328: }
  3492                           ;Tonche_16F877.h: 1329: break;
  3493  07B6  0008               	return
  3494  07B7                     l1865:	
  3495                           ;Tonche_16F877.h: 1330: case 1:
  3496                           
  3497                           
  3498                           ;Tonche_16F877.h: 1331: if(value == 'h')
  3499  07B7  0873               	movf	digitalWrite@value,w
  3500  07B8  3A68               	xorlw	104
  3501  07B9  1D03               	skipz
  3502  07BA  2FBF               	goto	l1869
  3503                           
  3504                           ;Tonche_16F877.h: 1332: {
  3505                           ;Tonche_16F877.h: 1333: PORTEbits.RE1 = 1;
  3506  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  3507  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  3508  07BD  1489               	bsf	9,1	;volatile
  3509                           
  3510                           ;Tonche_16F877.h: 1334: }
  3511  07BE  0008               	return
  3512  07BF                     l1869:	
  3513                           
  3514                           ;Tonche_16F877.h: 1335: else if(value == 'l')
  3515  07BF  0873               	movf	digitalWrite@value,w
  3516  07C0  3A6C               	xorlw	108
  3517  07C1  1D03               	skipz
  3518  07C2  0008               	return
  3519                           
  3520                           ;Tonche_16F877.h: 1336: {
  3521                           ;Tonche_16F877.h: 1337: PORTEbits.RE1 = 0;
  3522  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  3523  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  3524  07C5  1089               	bcf	9,1	;volatile
  3525                           
  3526                           ;Tonche_16F877.h: 1338: }
  3527                           ;Tonche_16F877.h: 1339: break;
  3528  07C6  0008               	return
  3529  07C7                     l1873:	
  3530                           ;Tonche_16F877.h: 1340: case 2:
  3531                           
  3532                           
  3533                           ;Tonche_16F877.h: 1341: if(value == 'h')
  3534  07C7  0873               	movf	digitalWrite@value,w
  3535  07C8  3A68               	xorlw	104
  3536  07C9  1D03               	skipz
  3537  07CA  2FCF               	goto	l1877
  3538                           
  3539                           ;Tonche_16F877.h: 1342: {
  3540                           ;Tonche_16F877.h: 1343: PORTEbits.RE2 = 1;
  3541  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  3542  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  3543  07CD  1509               	bsf	9,2	;volatile
  3544                           
  3545                           ;Tonche_16F877.h: 1344: }
  3546  07CE  0008               	return
  3547  07CF                     l1877:	
  3548                           
  3549                           ;Tonche_16F877.h: 1345: else if(value == 'l')
  3550  07CF  0873               	movf	digitalWrite@value,w
  3551  07D0  3A6C               	xorlw	108
  3552  07D1  1D03               	skipz
  3553  07D2  0008               	return
  3554                           
  3555                           ;Tonche_16F877.h: 1346: {
  3556                           ;Tonche_16F877.h: 1347: PORTEbits.RE2 = 0;
  3557  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3558  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  3559  07D5  1109               	bcf	9,2	;volatile
  3560                           
  3561                           ;Tonche_16F877.h: 1350: }
  3562                           
  3563                           ;Tonche_16F877.h: 1348: }
  3564                           ;Tonche_16F877.h: 1349: break;
  3565  07D6  0008               	return
  3566  07D7                     l1883:	
  3567                           
  3568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3569                           ; Switch size 1, requested type "space"
  3570                           ; Number of cases is 1, Range of values is 0 to 0
  3571                           ; switch strategies available:
  3572                           ; Name         Instructions Cycles
  3573                           ; simple_byte            4     3 (average)
  3574                           ; direct_byte           11     8 (fixed)
  3575                           ; jumptable            260     6 (fixed)
  3576                           ;	Chosen strategy is simple_byte
  3577  07D7  0871               	movf	digitalWrite@pin+1,w
  3578  07D8  3A00               	xorlw	0	; case 0
  3579  07D9  1903               	skipnz
  3580  07DA  2FDC               	goto	l2825
  3581  07DB  2FF9               	goto	l699
  3582  07DC                     l2825:	
  3583                           
  3584                           ; Switch size 1, requested type "space"
  3585                           ; Number of cases is 3, Range of values is 0 to 2
  3586                           ; switch strategies available:
  3587                           ; Name         Instructions Cycles
  3588                           ; simple_byte           10     6 (average)
  3589                           ; direct_byte           17     8 (fixed)
  3590                           ; jumptable            260     6 (fixed)
  3591                           ;	Chosen strategy is simple_byte
  3592  07DC  0870               	movf	digitalWrite@pin,w
  3593  07DD  3A00               	xorlw	0	; case 0
  3594  07DE  1903               	skipnz
  3595  07DF  2FA7               	goto	l1857
  3596  07E0  3A01               	xorlw	1	; case 1
  3597  07E1  1903               	skipnz
  3598  07E2  2FB7               	goto	l1865
  3599  07E3  3A03               	xorlw	3	; case 2
  3600  07E4  1903               	skipnz
  3601  07E5  2FC7               	goto	l1873
  3602  07E6  2FF9               	goto	l699
  3603                           
  3604                           ;Tonche_16F877.h: 1352: }
  3605                           
  3606                           ;Tonche_16F877.h: 1351: break;
  3607  07E7  0008               	return
  3608  07E8                     l1887:	
  3609  07E8  0872               	movf	digitalWrite@port,w
  3610                           
  3611                           ; Switch size 1, requested type "space"
  3612                           ; Number of cases is 5, Range of values is 65 to 69
  3613                           ; switch strategies available:
  3614                           ; Name         Instructions Cycles
  3615                           ; simple_byte           16     9 (average)
  3616                           ; direct_byte           26    11 (fixed)
  3617                           ; jumptable            263     9 (fixed)
  3618                           ;	Chosen strategy is simple_byte
  3619  07E9  3A41               	xorlw	65	; case 65
  3620  07EA  1903               	skipnz
  3621  07EB  2DAD               	goto	l1651
  3622  07EC  3A03               	xorlw	3	; case 66
  3623  07ED  1903               	skipnz
  3624  07EE  2E47               	goto	l1719
  3625  07EF  3A01               	xorlw	1	; case 67
  3626  07F0  1903               	skipnz
  3627  07F1  2EE7               	goto	l1787
  3628  07F2  3A07               	xorlw	7	; case 68
  3629  07F3  1903               	skipnz
  3630  07F4  2F87               	goto	l1855
  3631  07F5  3A01               	xorlw	1	; case 69
  3632  07F6  1903               	skipnz
  3633  07F7  2FD7               	goto	l1883
  3634  07F8  2FF9               	goto	l699
  3635  07F9                     l699:	
  3636  07F9  0008               	return
  3637  07FA                     __end_of_digitalWrite:	
  3638                           
  3639                           	psect	text8
  3640  01A5                     __ptext8:	
  3641 ;; *************** function _SSPInterruptEnable *****************
  3642 ;; Defined at:
  3643 ;;		line 1965 in file "Tonche_16F877.h"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;		None               void
  3650 ;; Registers used:
  3651 ;;		None
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3657 ;;      Params:         0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0
  3660 ;;      Totals:         0       0       0       0       0
  3661 ;;Total ram usage:        0 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_setup
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           
  3671                           ;psect for function _SSPInterruptEnable
  3672  01A5                     _SSPInterruptEnable:	
  3673                           
  3674                           ;Tonche_16F877.h: 1967: PIE1bits.SSPIE = 1;
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _SSPInterruptEnable: []
  3678  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  3679  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  3680  01A7  158C               	bsf	12,3	;volatile
  3681  01A8  0008               	return
  3682  01A9                     __end_of_SSPInterruptEnable:	
  3683                           
  3684                           	psect	text9
  3685  01BB                     __ptext9:	
  3686 ;; *************** function _PortBChangeIntEnable *****************
  3687 ;; Defined at:
  3688 ;;		line 1683 in file "Tonche_16F877.h"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  mode            2    0[COMMON] int 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;		None               void
  3695 ;; Registers used:
  3696 ;;		wreg
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3702 ;;      Params:         2       0       0       0       0
  3703 ;;      Locals:         0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0
  3705 ;;      Totals:         2       0       0       0       0
  3706 ;;Total ram usage:        2 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_setup
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           
  3716                           ;psect for function _PortBChangeIntEnable
  3717  01BB                     _PortBChangeIntEnable:	
  3718                           
  3719                           ;Tonche_16F877.h: 1685: if(mode == 1)
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in _PortBChangeIntEnable: [wreg]
  3723  01BB  3001               	movlw	1
  3724  01BC  0670               	xorwf	PortBChangeIntEnable@mode,w
  3725  01BD  0471               	iorwf	PortBChangeIntEnable@mode+1,w
  3726  01BE  1D03               	skipz
  3727  01BF  29C2               	goto	l811
  3728                           
  3729                           ;Tonche_16F877.h: 1686: {
  3730                           ;Tonche_16F877.h: 1687: INTCONbits.RBIE = 1;
  3731  01C0  158B               	bsf	11,3	;volatile
  3732                           
  3733                           ;Tonche_16F877.h: 1688: }
  3734  01C1  0008               	return
  3735  01C2                     l811:	
  3736                           
  3737                           ;Tonche_16F877.h: 1689: else
  3738                           ;Tonche_16F877.h: 1690: {
  3739                           ;Tonche_16F877.h: 1691: INTCONbits.RBIE = 0;
  3740  01C2  118B               	bcf	11,3	;volatile
  3741  01C3  0008               	return
  3742  01C4                     __end_of_PortBChangeIntEnable:	
  3743                           
  3744                           	psect	text10
  3745  01B2                     __ptext10:	
  3746 ;; *************** function _PeripheralIntEnable *****************
  3747 ;; Defined at:
  3748 ;;		line 1650 in file "Tonche_16F877.h"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  mode            2    0[COMMON] int 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;		None               void
  3755 ;; Registers used:
  3756 ;;		wreg
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3762 ;;      Params:         2       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0
  3765 ;;      Totals:         2       0       0       0       0
  3766 ;;Total ram usage:        2 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_setup
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function _PeripheralIntEnable
  3777  01B2                     _PeripheralIntEnable:	
  3778                           
  3779                           ;Tonche_16F877.h: 1652: if(mode == 1)
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _PeripheralIntEnable: [wreg]
  3783  01B2  3001               	movlw	1
  3784  01B3  0670               	xorwf	PeripheralIntEnable@mode,w
  3785  01B4  0471               	iorwf	PeripheralIntEnable@mode+1,w
  3786  01B5  1D03               	skipz
  3787  01B6  29B9               	goto	l796
  3788                           
  3789                           ;Tonche_16F877.h: 1653: {
  3790                           ;Tonche_16F877.h: 1654: INTCONbits.PEIE = 1;
  3791  01B7  170B               	bsf	11,6	;volatile
  3792                           
  3793                           ;Tonche_16F877.h: 1655: }
  3794  01B8  0008               	return
  3795  01B9                     l796:	
  3796                           
  3797                           ;Tonche_16F877.h: 1656: else
  3798                           ;Tonche_16F877.h: 1657: {
  3799                           ;Tonche_16F877.h: 1658: INTCONbits.PEIE = 0;
  3800  01B9  130B               	bcf	11,6	;volatile
  3801  01BA  0008               	return
  3802  01BB                     __end_of_PeripheralIntEnable:	
  3803                           
  3804                           	psect	text11
  3805  01A9                     __ptext11:	
  3806 ;; *************** function _GlobalInterruptEnable *****************
  3807 ;; Defined at:
  3808 ;;		line 1639 in file "Tonche_16F877.h"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  mode            2    0[COMMON] int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3822 ;;      Params:         2       0       0       0       0
  3823 ;;      Locals:         0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0
  3825 ;;      Totals:         2       0       0       0       0
  3826 ;;Total ram usage:        2 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_setup
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _GlobalInterruptEnable
  3837  01A9                     _GlobalInterruptEnable:	
  3838                           
  3839                           ;Tonche_16F877.h: 1641: if(mode == 1)
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _GlobalInterruptEnable: [wreg]
  3843  01A9  3001               	movlw	1
  3844  01AA  0670               	xorwf	GlobalInterruptEnable@mode,w
  3845  01AB  0471               	iorwf	GlobalInterruptEnable@mode+1,w
  3846  01AC  1D03               	skipz
  3847  01AD  29B0               	goto	l791
  3848                           
  3849                           ;Tonche_16F877.h: 1642: {
  3850                           ;Tonche_16F877.h: 1643: INTCONbits.GIE = 1;
  3851  01AE  178B               	bsf	11,7	;volatile
  3852                           
  3853                           ;Tonche_16F877.h: 1644: }
  3854  01AF  0008               	return
  3855  01B0                     l791:	
  3856                           
  3857                           ;Tonche_16F877.h: 1645: else
  3858                           ;Tonche_16F877.h: 1646: {
  3859                           ;Tonche_16F877.h: 1647: INTCONbits.GIE = 0;
  3860  01B0  138B               	bcf	11,7	;volatile
  3861  01B1  0008               	return
  3862  01B2                     __end_of_GlobalInterruptEnable:	
  3863                           
  3864                           	psect	text12
  3865  01F5                     __ptext12:	
  3866 ;; *************** function _loop *****************
  3867 ;; Defined at:
  3868 ;;		line 25 in file "main.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;		None               void
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3882 ;;      Params:         0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    1
  3889 ;; This function calls:
  3890 ;;		_spiBufferfull
  3891 ;;		_spiRead
  3892 ;; This function is called by:
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _loop
  3899  01F5                     _loop:	
  3900                           
  3901                           ;main.c: 27: if(spiBufferfull() == 1)
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _loop: [wreg+status,2+status,0+pclath+cstack]
  3905  01F5  120A  118A  21CE  120A  118A  	fcall	_spiBufferfull
  3906  01FA  3001               	movlw	1
  3907  01FB  0670               	xorwf	?_spiBufferfull,w
  3908  01FC  0471               	iorwf	?_spiBufferfull+1,w
  3909  01FD  1D03               	skipz
  3910  01FE  2A08               	goto	l966
  3911                           
  3912                           ;main.c: 28: {
  3913                           ;main.c: 29: PORTB = spiRead();
  3914  01FF  120A  118A  21C4   	fcall	_spiRead
  3915  0202  0870               	movf	?_spiRead,w
  3916  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3917  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3918  0205  0086               	movwf	6	;volatile
  3919                           
  3920                           ;main.c: 30: PORTDbits.RD2 = 1;
  3921  0206  1508               	bsf	8,2	;volatile
  3922                           
  3923                           ;main.c: 31: }
  3924  0207  0008               	return
  3925  0208                     l966:	
  3926                           
  3927                           ;main.c: 32: else
  3928                           ;main.c: 33: {
  3929                           ;main.c: 35: PORTDbits.RD2 = 0;
  3930  0208  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0209  1303               	bcf	3,6	;RP1=0, select bank0
  3932  020A  1108               	bcf	8,2	;volatile
  3933  020B  0008               	return
  3934  020C                     __end_of_loop:	
  3935                           
  3936                           	psect	text13
  3937  01C4                     __ptext13:	
  3938 ;; *************** function _spiRead *****************
  3939 ;; Defined at:
  3940 ;;		line 1492 in file "Tonche_16F877.h"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  2    0[COMMON] int 
  3947 ;; Registers used:
  3948 ;;		wreg
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3954 ;;      Params:         2       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0
  3956 ;;      Temps:          2       0       0       0       0
  3957 ;;      Totals:         4       0       0       0       0
  3958 ;;Total ram usage:        4 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_loop
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           
  3968                           ;psect for function _spiRead
  3969  01C4                     _spiRead:	
  3970                           
  3971                           ;Tonche_16F877.h: 1494: return SSPBUF;
  3972                           
  3973                           ;incstack = 0
  3974                           ; Regs used in _spiRead: [wreg]
  3975  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3976  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3977  01C6  0813               	movf	19,w	;volatile
  3978  01C7  00F2               	movwf	??_spiRead
  3979  01C8  01F3               	clrf	??_spiRead+1
  3980  01C9  0872               	movf	??_spiRead,w
  3981  01CA  00F0               	movwf	?_spiRead
  3982  01CB  0873               	movf	??_spiRead+1,w
  3983  01CC  00F1               	movwf	?_spiRead+1
  3984  01CD  0008               	return
  3985  01CE                     __end_of_spiRead:	
  3986                           
  3987                           	psect	text14
  3988  01CE                     __ptext14:	
  3989 ;; *************** function _spiBufferfull *****************
  3990 ;; Defined at:
  3991 ;;		line 1624 in file "Tonche_16F877.h"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  2    0[COMMON] int 
  3998 ;; Registers used:
  3999 ;;		wreg, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4005 ;;      Params:         2       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0
  4007 ;;      Temps:          2       0       0       0       0
  4008 ;;      Totals:         4       0       0       0       0
  4009 ;;Total ram usage:        4 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_loop
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _spiBufferfull
  4020  01CE                     _spiBufferfull:	
  4021                           
  4022                           ;Tonche_16F877.h: 1626: return SSPSTATbits.BF;
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _spiBufferfull: [wreg+status,2+status,0]
  4026  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  4027  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  4028  01D0  0814               	movf	20,w	;volatile
  4029  01D1  3901               	andlw	1
  4030  01D2  00F2               	movwf	??_spiBufferfull
  4031  01D3  01F3               	clrf	??_spiBufferfull+1
  4032  01D4  0872               	movf	??_spiBufferfull,w
  4033  01D5  00F0               	movwf	?_spiBufferfull
  4034  01D6  0873               	movf	??_spiBufferfull+1,w
  4035  01D7  00F1               	movwf	?_spiBufferfull+1
  4036  01D8  0008               	return
  4037  01D9                     __end_of_spiBufferfull:	
  4038  007E                     btemp	set	126	;btemp
  4039  007E                     wtemp	set	126
  4040  007E                     wtemp0	set	126
  4041  0080                     wtemp1	set	128
  4042  0082                     wtemp2	set	130
  4043  0084                     wtemp3	set	132
  4044  0086                     wtemp4	set	134
  4045  0088                     wtemp5	set	136
  4046  007F                     wtemp6	set	127
  4047  007E                     ttemp	set	126
  4048  007E                     ttemp0	set	126
  4049  0081                     ttemp1	set	129
  4050  0084                     ttemp2	set	132
  4051  0087                     ttemp3	set	135
  4052  007F                     ttemp4	set	127
  4053  007E                     ltemp	set	126
  4054  007E                     ltemp0	set	126
  4055  0082                     ltemp1	set	130
  4056  0086                     ltemp2	set	134
  4057  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_setup
    _setup->_digitalWrite
    _spiSlavebegin->_ADPortConfiguration
    _loop->_spiBufferfull
    _loop->_spiRead

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2828
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                4     4      0    2828
                                              4 COMMON     4     4      0
              _GlobalInterruptEnable
                _PeripheralIntEnable
               _PortBChangeIntEnable
                 _SSPInterruptEnable
                       _digitalWrite
                          _portbMode
                          _portdMode
                     _spiCLKpolarity
                      _spiSlavebegin
 ---------------------------------------------------------------------------------
 (2) _spiSlavebegin                                        0     0      0      58
                _ADPortConfiguration
 ---------------------------------------------------------------------------------
 (3) _ADPortConfiguration                                  2     0      2      58
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _spiCLKpolarity                                       1     1      0      30
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _portdMode                                            3     0      3     656
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) _portbMode                                            3     0      3     656
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         4     0      4    1209
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) _SSPInterruptEnable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PortBChangeIntEnable                                 2     0      2      58
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PeripheralIntEnable                                  2     0      2      58
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GlobalInterruptEnable                                2     0      2      58
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0       0
                      _spiBufferfull
                            _spiRead
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _spiBufferfull                                        4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _spiBufferfull
     _spiRead
   _setup
     _GlobalInterruptEnable
     _PeripheralIntEnable
     _PortBChangeIntEnable
     _SSPInterruptEnable
     _digitalWrite
     _portbMode
     _portdMode
     _spiCLKpolarity
     _spiSlavebegin
       _ADPortConfiguration

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 19 05:20:22 2018

                _spiCLKpolarity 01E4                 ??_spiSlavebegin 0072                     __CFG_CP$OFF 0000  
                   _SSPSTATbits 0094          ?_GlobalInterruptEnable 0070                              u15 0345  
                           l201 041F                             l202 0443                             l130 0353  
                           l140 036B                             l300 047F                             l134 035F  
                           l144 0377                             l161 03A7                             l153 038F  
                           l321 04BB                             l313 04A3                             l305 048B  
                           l181 03E3                             l173 03CB                             l165 03B3  
                           l157 039B                             l149 0383                             l341 04F7  
                           l333 04DF                             l325 04C7                             l317 04AF  
                           l309 0497                             l193 0407                             l185 03EF  
                           l177 03D7                             l169 03BF                             l353 051B  
                           l345 0503                             l337 04EB                             l329 04D3  
                           l290 0467                             l197 0413                             l189 03FB  
                           l357 0527                             l349 050F                             l358 054B  
                           l286 045B                             l296 0473                             l811 01C2  
                           l760 02AC                             l761 02B3                             l770 02F2  
                           l762 02BA                             l771 02F9                             l763 02C1  
                           l772 0300                             l764 02C8                             l756 0297  
                           l765 02CF                             l766 02D6                             l758 029E  
                           l791 01B0                             l767 02DD                             l759 02A5  
                           l768 02E4                             l769 02EB                             l699 07F9  
                           l796 01B9                             l966 0208                    __CFG_CPD$OFF 0000  
                           u385 044D                     __CFG_WRT$ON 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l1501 040B                            l1511 0423  
                          l1601 054D                            l1505 0417                            l1441 0357  
                          l1531 0477                            l1523 045F                            l1701 0627  
                          l1621 0575                            l1613 0565                            l1605 0555  
                          l1461 0393                            l1453 037B                            l1445 0363  
                          l1429 0307                            l1551 04B3                            l1543 049B  
                          l1535 0483                            l1527 046B                            l1801 071F  
                          l1721 0667                            l1713 063F                            l1705 062F  
                          l1641 059D                            l1633 058D                            l1625 057D  
                          l1617 056D                            l1609 055D                            l1481 03CF  
                          l1473 03B7                            l1465 039F                            l1457 0387  
                          l1449 036F                            l1651 05AD                            l1571 04EF  
                          l1563 04D7                            l1555 04BF                            l1547 04A7  
                          l1539 048F                            l1821 0747                            l1813 0737  
                          l1805 0727                            l1741 068F                            l1733 067F  
                          l1725 066F                            l1709 0637                            l1661 05D7  
                          l1653 05C7                            l1645 05A5                            l1637 0595  
                          l1629 0585                            l1493 03F3                            l1485 03DB  
                          l1477 03C3                            l1469 03AB                            l1719 0647  
                          l1583 0513                            l1575 04FB                            l1567 04E3  
                          l1559 04CB                            l1841 076F                            l1833 075F  
                          l1825 074F                            l1817 073F                            l1809 072F  
                          l1761 06B7                            l1753 06A7                            l1745 0697  
                          l1737 0687                            l1729 0677                            l1681 05FF  
                          l1673 05EF                            l1665 05DF                            l1657 05CF  
                          l1497 03FF                            l1489 03E7                            l1593 052B  
                          l1587 051F                            l1579 0507                            l2811 030C  
                          l1861 07AF                            l1845 0777                            l1837 0767  
                          l1829 0757                            l2821 06EC                            l1781 06DF  
                          l1773 06CF                            l1765 06BF                            l1757 06AF  
                          l1749 069F                            l1693 0617                            l1685 0607  
                          l1677 05F7                            l1669 05E7                            l2813 0530  
                          l2823 078C                            l1855 0787                            l2815 0428  
                          l2825 07DC                            l1873 07C7                            l1865 07B7  
                          l1857 07A7                            l1849 077F                            l1793 070F  
                          l1777 06D7                            l1769 06C7                            l1697 061F  
                          l1689 060F                            l2817 05B2                            l1883 07D7  
                          l1787 06E7                            l2819 064C                            l1939 01ED  
                          l1877 07CF                            l1869 07BF                            l1797 0717  
                          l1789 0707                            l1887 07E8                            l1995 01DE  
                          u1465 027E                    portbMode@pin 0070                            _data 0078  
                          _main 01D9                            _loop 01F5                            btemp 007E  
                          ltemp 007E                    portdMode@pin 0070                            start 0000  
                          ttemp 007E                            wtemp 007E          __end_of_spiCLKpolarity 01F5  
                         ?_main 0070     __end_of_ADPortConfiguration 033C                           ?_loop 0070  
                 __CFG_WDTE$OFF 0000                           _TMR1H 000F                           _TMR1L 000E  
                         _PORTB 0006     __end_of_PeripheralIntEnable 01BB                   portbMode@mode 0072  
                         _setup 0226                  __CFG_BOREN$OFF 0000                 __end_of_spiRead 01CE  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                   portdMode@mode 0072                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
     GlobalInterruptEnable@mode 0070                 ?_spiCLKpolarity 0070            __end_of_digitalWrite 07FA  
               __initialization 07FA                    __end_of_main 01E4                    __end_of_loop 020C  
                        ??_main 0078                          ??_loop 0074                          ?_setup 0070  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000    __end_of_PortBChangeIntEnable 01C4  
                     ??_spiRead 0072                          setup@i 0076           __end_of_spiBufferfull 01D9  
       __end_of__initialization 07FC      __end_of_SSPInterruptEnable 01A9         ??_GlobalInterruptEnable 0072  
                __pcstackCOMMON 0070                   __end_of_setup 0296                  _OPTION_REGbits 0081  
                       ??_setup 0074           __size_of_digitalWrite 02AE                      __pmaintext 01D9  
         __end_of_spiSlavebegin 0226              __size_of_portbMode 0108              __size_of_portdMode 0108  
                  _digitalWrite 054C                ??_spiCLKpolarity 0070            _PortBChangeIntEnable 01BB  
       PeripheralIntEnable@mode 0070                         __ptext0 0000                         __ptext1 0226  
                       __ptext2 020C                         __ptext3 0296                         __ptext4 01E4  
                       __ptext5 0444                         __ptext6 033C                         __ptext7 054C  
                       __ptext8 01A5                         __ptext9 01BB                       _T1CONbits 0010  
                       _spiRead 01C4    __size_of_ADPortConfiguration 00A6            end_of_initialization 07FC  
  __size_of_PeripheralIntEnable 0009           ?_PortBChangeIntEnable 0070               __end_of_portbMode 0444  
             __end_of_portdMode 054C                       _PORTAbits 0005                       _PORTBbits 0006  
                     _PORTCbits 0007                       _PORTDbits 0008                       _PORTEbits 0009  
                     _TRISAbits 0085                       _TRISBbits 0086                       _TRISCbits 0087  
                     _TRISDbits 0088                       _TRISEbits 0089        PortBChangeIntEnable@mode 0070  
__size_of_GlobalInterruptEnable 0009   __end_of_GlobalInterruptEnable 01B2              _SSPInterruptEnable 01A5  
           start_initialization 07FA             ?_SSPInterruptEnable 0070          ??_PortBChangeIntEnable 0072  
          ??_SSPInterruptEnable 0070          __size_of_spiBufferfull 000B                     __pbssCOMMON 0078  
                     ___latbits 0002             _ADPortConfiguration 0296             _PeripheralIntEnable 01B2  
                      ?_spiRead 0070            ?_ADPortConfiguration 0070                   _spiBufferfull 01CE  
                __size_of_setup 0070            ?_PeripheralIntEnable 0070          __size_of_spiSlavebegin 001A  
                      _PIE1bits 008C                        _PIE2bits 008D                        _PIR1bits 000C  
                      _PIR2bits 000D                       _portbMode 033C                       _portdMode 0444  
                    _ADCON1bits 009F           ??_ADPortConfiguration 0072                  ?_spiBufferfull 0070  
         ??_PeripheralIntEnable 0072          spiCLKpolarity@polarity 0070         __size_of_spiCLKpolarity 0011  
                    ?_portbMode 0070                      ?_portdMode 0070       ADPortConfiguration@config 0070  
                 _spiSlavebegin 020C                        __ptext10 01B2                        __ptext11 01A9  
                      __ptext12 01F5                        __ptext13 01C4                        __ptext14 01CE  
              __size_of_spiRead 000A                   __size_of_main 000B                   __size_of_loop 0017  
                ?_spiSlavebegin 0070           _GlobalInterruptEnable 01A9                      _INTCONbits 000B  
               ??_spiBufferfull 0072                   ?_digitalWrite 0070               digitalWrite@value 0073  
 __size_of_PortBChangeIntEnable 0009     __size_of_SSPInterruptEnable 0004                     ??_portbMode 0073  
                   ??_portdMode 0073                digitalWrite@port 0072                  ??_digitalWrite 0074  
               digitalWrite@pin 0070                      _SSPCONbits 0014  
